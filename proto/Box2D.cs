// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: box2d.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Box2D {

  /// <summary>Holder for reflection information generated from box2d.proto</summary>
  public static partial class Box2DReflection {

    #region Descriptor
    /// <summary>File descriptor for box2d.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static Box2DReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgtib3gyZC5wcm90bxIFYm94MmQiHgoGUGJWZWMyEgkKAXgYASACKAISCQoB",
            "eRgCIAIoAiJJCghQYkZpbHRlchIVCg1jYXRlZ29yeV9iaXRzGAEgASgFEhEK",
            "CW1hc2tfYml0cxgCIAEoBRITCgtncm91cF9pbmRleBgDIAEoBSLHAQoHUGJT",
            "aGFwZRILCgN0YWcYASABKAMSIAoEdHlwZRgCIAIoDjISLmJveDJkLlBiU2hh",
            "cGVUeXBlEh0KBmNlbnRlchgKIAEoCzINLmJveDJkLlBiVmVjMhIOCgZyYWRp",
            "dXMYCyABKAISHQoGcG9pbnRzGBQgAygLMg0uYm94MmQuUGJWZWMyEh4KB25v",
            "cm1hbHMYFSADKAsyDS5ib3gyZC5QYlZlYzISHwoIY2VudHJvaWQYFiABKAsy",
            "DS5ib3gyZC5QYlZlYzIioAEKCVBiRml4dHVyZRILCgN0YWcYASABKAMSEwoL",
            "cmVzdGl0dXRpb24YAiABKAISEAoIZnJpY3Rpb24YAyABKAISDwoHZGVuc2l0",
            "eRgEIAEoAhIOCgZzZW5zb3IYBSABKAgSHwoGZmlsdGVyGAogASgLMg8uYm94",
            "MmQuUGJGaWx0ZXISHQoFc2hhcGUYCyABKAsyDi5ib3gyZC5QYlNoYXBlIugG",
            "CgdQYkpvaW50EgsKA3RhZxgBIAEoAxIgCgR0eXBlGAIgAigOMhIuYm94MmQu",
            "UGJKb2ludFR5cGUSDgoGYm9keV9hGAMgASgFEg4KBmJvZHlfYhgEIAEoBRIY",
            "ChBjb2xsaWRlQ29ubmVjdGVkGAUgASgIEiUKDmxvY2FsX2FuY2hvcl9hGAYg",
            "ASgLMg0uYm94MmQuUGJWZWMyEiUKDmxvY2FsX2FuY2hvcl9iGAcgASgLMg0u",
            "Ym94MmQuUGJWZWMyEhEKCXJlZl9hbmdsZRgKIAEoAhIUCgxlbmFibGVfbGlt",
            "aXQYDCABKAgSEwoLbG93ZXJfbGltaXQYDSABKAISEwoLdXBwZXJfbGltaXQY",
            "DiABKAISFAoMZW5hYmxlX21vdG9yGA8gASgIEhMKC21vdG9yX3NwZWVkGBAg",
            "ASgCEhgKEG1heF9tb3Rvcl90b3JxdWUYESABKAISIwoMbG9jYWxfYXhpc19h",
            "GBQgASgLMg0uYm94MmQuUGJWZWMyEhcKD21heF9tb3Rvcl9mb3JjZRgVIAEo",
            "AhIOCgZsZW5ndGgYHiABKAISEQoJZnJlcXVlbmN5GB8gASgCEhUKDWRhbXBp",
            "bmdfcmF0aW8YICABKAISJgoPZ3JvdW5kX2FuY2hvcl9hGCggASgLMg0uYm94",
            "MmQuUGJWZWMyEiYKD2dyb3VuZF9hbmNob3JfYhgpIAEoCzINLmJveDJkLlBi",
            "VmVjMhIQCghsZW5ndGhfYRgqIAEoAhIQCghsZW5ndGhfYhgrIAEoAhINCgVy",
            "YXRpbxgsIAEoAhIUCgxtYXhfbGVuZ3RoX2EYLSABKAISFAoMbWF4X2xlbmd0",
            "aF9iGC4gASgCEh0KBnRhcmdldBgyIAEoCzINLmJveDJkLlBiVmVjMhIRCglt",
            "YXhfZm9yY2UYMyABKAISDgoGam9pbnQxGD0gASgFEg4KBmpvaW50Mhg+IAEo",
            "BRIYChBzcHJpbmdfZnJlcXVlbmN5GEYgASgCEhwKFHNwcmluZ19kYW1waW5n",
            "X3JhdGlvGEcgASgCEhIKCm1heF90b3JxdWUYWiABKAISEgoKbWF4X2xlbmd0",
            "aBhkIAEoAhIOCgZib2RpZXMYbiADKAUSDgoGam9pbnRzGG8gAygFEhUKDXRh",
            "cmdldF92b2x1bWUYcCABKAIixQMKBlBiQm9keRILCgN0YWcYASABKAMSHwoE",
            "dHlwZRgCIAIoDjIRLmJveDJkLlBiQm9keVR5cGUSHwoIcG9zaXRpb24YCiAB",
            "KAsyDS5ib3gyZC5QYlZlYzISDQoFYW5nbGUYCyABKAISJgoPbGluZWFyX3Zl",
            "bG9jaXR5GAwgASgLMg0uYm94MmQuUGJWZWMyEhgKEGFuZ3VsYXJfdmVsb2Np",
            "dHkYDSABKAISHAoFZm9yY2UYDiABKAsyDS5ib3gyZC5QYlZlYzISDgoGdG9y",
            "cXVlGA8gASgCEgwKBG1hc3MYECABKAISCQoBSRgRIAEoAhIWCg5saW5lYXJf",
            "ZGFtcGluZxgyIAEoAhIXCg9hbmd1bGFyX2RhbXBpbmcYMyABKAISFQoNZ3Jh",
            "dml0eV9zY2FsZRg0IAEoAhIOCgZidWxsZXQYNSABKAgSEwoLYWxsb3dfc2xl",
            "ZXAYNiABKAgSDQoFYXdha2UYNyABKAgSDgoGYWN0aXZlGDggASgIEhYKDmZp",
            "eGVkX3JvdGF0aW9uGDkgASgIEgwKBFVVSUQYPCABKAkSIgoIZml4dHVyZXMY",
            "ZCADKAsyEC5ib3gyZC5QYkZpeHR1cmUi7gEKB1BiV29ybGQSCwoDdGFnGAEg",
            "ASgDEh4KB2dyYXZpdHkYAiABKAsyDS5ib3gyZC5QYlZlYzISEwoLYWxsb3df",
            "c2xlZXAYAyABKAgSGQoRYXV0b19jbGVhcl9mb3JjZXMYBCABKAgSFQoNd2Fy",
            "bV9zdGFydGluZxgFIAEoCBIaChJjb250aW51b3VzX3BoeXNpY3MYBiABKAgS",
            "FAoMc3ViX3N0ZXBwaW5nGAcgASgIEh0KBmJvZGllcxgUIAMoCzINLmJveDJk",
            "LlBiQm9keRIeCgZqb2ludHMYFSADKAsyDi5ib3gyZC5QYkpvaW50KjQKClBi",
            "Qm9keVR5cGUSCgoGU1RBVElDEAASCwoHRFlOQU1JQxABEg0KCUtJTkVNQVRJ",
            "QxACKjoKC1BiU2hhcGVUeXBlEgoKBkNJUkNMRRABEgsKB1BPTFlHT04QAhII",
            "CgRFREdFEAMSCAoETE9PUBAEKqUBCgtQYkpvaW50VHlwZRIMCghESVNUQU5D",
            "RRABEgwKCFJFVk9MVVRFEAISDQoJUFJJU01BVElDEAMSCgoGUFVMTEVZEAQS",
            "CQoFTU9VU0UQBRIICgRHRUFSEAYSCQoFV0hFRUwQBxIICgRXRUxEEAgSDAoI",
            "RlJJQ1RJT04QCRIICgRST1BFEAoSEwoPQ09OU1RBTlRfVk9MVU1FEAsSCAoE",
            "TElORRAM"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Box2D.PbBodyType), typeof(global::Box2D.PbShapeType), typeof(global::Box2D.PbJointType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Box2D.PbVec2), global::Box2D.PbVec2.Parser, new[]{ "X", "Y" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Box2D.PbFilter), global::Box2D.PbFilter.Parser, new[]{ "CategoryBits", "MaskBits", "GroupIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Box2D.PbShape), global::Box2D.PbShape.Parser, new[]{ "Tag", "Type", "Center", "Radius", "Points", "Normals", "Centroid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Box2D.PbFixture), global::Box2D.PbFixture.Parser, new[]{ "Tag", "Restitution", "Friction", "Density", "Sensor", "Filter", "Shape" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Box2D.PbJoint), global::Box2D.PbJoint.Parser, new[]{ "Tag", "Type", "BodyA", "BodyB", "CollideConnected", "LocalAnchorA", "LocalAnchorB", "RefAngle", "EnableLimit", "LowerLimit", "UpperLimit", "EnableMotor", "MotorSpeed", "MaxMotorTorque", "LocalAxisA", "MaxMotorForce", "Length", "Frequency", "DampingRatio", "GroundAnchorA", "GroundAnchorB", "LengthA", "LengthB", "Ratio", "MaxLengthA", "MaxLengthB", "Target", "MaxForce", "Joint1", "Joint2", "SpringFrequency", "SpringDampingRatio", "MaxTorque", "MaxLength", "Bodies", "Joints", "TargetVolume" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Box2D.PbBody), global::Box2D.PbBody.Parser, new[]{ "Tag", "Type", "Position", "Angle", "LinearVelocity", "AngularVelocity", "Force", "Torque", "Mass", "I", "LinearDamping", "AngularDamping", "GravityScale", "Bullet", "AllowSleep", "Awake", "Active", "FixedRotation", "UUID", "Fixtures" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Box2D.PbWorld), global::Box2D.PbWorld.Parser, new[]{ "Tag", "Gravity", "AllowSleep", "AutoClearForces", "WarmStarting", "ContinuousPhysics", "SubStepping", "Bodies", "Joints" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum PbBodyType {
    [pbr::OriginalName("STATIC")] Static = 0,
    [pbr::OriginalName("DYNAMIC")] Dynamic = 1,
    [pbr::OriginalName("KINEMATIC")] Kinematic = 2,
  }

  public enum PbShapeType {
    [pbr::OriginalName("CIRCLE")] Circle = 1,
    [pbr::OriginalName("POLYGON")] Polygon = 2,
    [pbr::OriginalName("EDGE")] Edge = 3,
    [pbr::OriginalName("LOOP")] Loop = 4,
  }

  public enum PbJointType {
    [pbr::OriginalName("DISTANCE")] Distance = 1,
    [pbr::OriginalName("REVOLUTE")] Revolute = 2,
    [pbr::OriginalName("PRISMATIC")] Prismatic = 3,
    [pbr::OriginalName("PULLEY")] Pulley = 4,
    [pbr::OriginalName("MOUSE")] Mouse = 5,
    [pbr::OriginalName("GEAR")] Gear = 6,
    [pbr::OriginalName("WHEEL")] Wheel = 7,
    [pbr::OriginalName("WELD")] Weld = 8,
    [pbr::OriginalName("FRICTION")] Friction = 9,
    [pbr::OriginalName("ROPE")] Rope = 10,
    [pbr::OriginalName("CONSTANT_VOLUME")] ConstantVolume = 11,
    [pbr::OriginalName("LINE")] Line = 12,
  }

  #endregion

  #region Messages
  public sealed partial class PbVec2 : pb::IMessage<PbVec2>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PbVec2> _parser = new pb::MessageParser<PbVec2>(() => new PbVec2());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PbVec2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Box2D.Box2DReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PbVec2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PbVec2(PbVec2 other) : this() {
      _hasBits0 = other._hasBits0;
      x_ = other.x_;
      y_ = other.y_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PbVec2 Clone() {
      return new PbVec2(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private readonly static float XDefaultValue = 0F;

    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float X {
      get { if ((_hasBits0 & 1) != 0) { return x_; } else { return XDefaultValue; } }
      set {
        _hasBits0 |= 1;
        x_ = value;
      }
    }
    /// <summary>Gets whether the "x" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasX {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "x" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearX() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private readonly static float YDefaultValue = 0F;

    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Y {
      get { if ((_hasBits0 & 2) != 0) { return y_; } else { return YDefaultValue; } }
      set {
        _hasBits0 |= 2;
        y_ = value;
      }
    }
    /// <summary>Gets whether the "y" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasY {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "y" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearY() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PbVec2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PbVec2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasX) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (HasY) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasX) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (HasY) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasX) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (HasY) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasX) {
        size += 1 + 4;
      }
      if (HasY) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PbVec2 other) {
      if (other == null) {
        return;
      }
      if (other.HasX) {
        X = other.X;
      }
      if (other.HasY) {
        Y = other.Y;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PbFilter : pb::IMessage<PbFilter>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PbFilter> _parser = new pb::MessageParser<PbFilter>(() => new PbFilter());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PbFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Box2D.Box2DReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PbFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PbFilter(PbFilter other) : this() {
      _hasBits0 = other._hasBits0;
      categoryBits_ = other.categoryBits_;
      maskBits_ = other.maskBits_;
      groupIndex_ = other.groupIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PbFilter Clone() {
      return new PbFilter(this);
    }

    /// <summary>Field number for the "category_bits" field.</summary>
    public const int CategoryBitsFieldNumber = 1;
    private readonly static int CategoryBitsDefaultValue = 0;

    private int categoryBits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CategoryBits {
      get { if ((_hasBits0 & 1) != 0) { return categoryBits_; } else { return CategoryBitsDefaultValue; } }
      set {
        _hasBits0 |= 1;
        categoryBits_ = value;
      }
    }
    /// <summary>Gets whether the "category_bits" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCategoryBits {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "category_bits" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCategoryBits() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "mask_bits" field.</summary>
    public const int MaskBitsFieldNumber = 2;
    private readonly static int MaskBitsDefaultValue = 0;

    private int maskBits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaskBits {
      get { if ((_hasBits0 & 2) != 0) { return maskBits_; } else { return MaskBitsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        maskBits_ = value;
      }
    }
    /// <summary>Gets whether the "mask_bits" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaskBits {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "mask_bits" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaskBits() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "group_index" field.</summary>
    public const int GroupIndexFieldNumber = 3;
    private readonly static int GroupIndexDefaultValue = 0;

    private int groupIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GroupIndex {
      get { if ((_hasBits0 & 4) != 0) { return groupIndex_; } else { return GroupIndexDefaultValue; } }
      set {
        _hasBits0 |= 4;
        groupIndex_ = value;
      }
    }
    /// <summary>Gets whether the "group_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGroupIndex {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "group_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGroupIndex() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PbFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PbFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CategoryBits != other.CategoryBits) return false;
      if (MaskBits != other.MaskBits) return false;
      if (GroupIndex != other.GroupIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCategoryBits) hash ^= CategoryBits.GetHashCode();
      if (HasMaskBits) hash ^= MaskBits.GetHashCode();
      if (HasGroupIndex) hash ^= GroupIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCategoryBits) {
        output.WriteRawTag(8);
        output.WriteInt32(CategoryBits);
      }
      if (HasMaskBits) {
        output.WriteRawTag(16);
        output.WriteInt32(MaskBits);
      }
      if (HasGroupIndex) {
        output.WriteRawTag(24);
        output.WriteInt32(GroupIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCategoryBits) {
        output.WriteRawTag(8);
        output.WriteInt32(CategoryBits);
      }
      if (HasMaskBits) {
        output.WriteRawTag(16);
        output.WriteInt32(MaskBits);
      }
      if (HasGroupIndex) {
        output.WriteRawTag(24);
        output.WriteInt32(GroupIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasCategoryBits) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CategoryBits);
      }
      if (HasMaskBits) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaskBits);
      }
      if (HasGroupIndex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GroupIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PbFilter other) {
      if (other == null) {
        return;
      }
      if (other.HasCategoryBits) {
        CategoryBits = other.CategoryBits;
      }
      if (other.HasMaskBits) {
        MaskBits = other.MaskBits;
      }
      if (other.HasGroupIndex) {
        GroupIndex = other.GroupIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CategoryBits = input.ReadInt32();
            break;
          }
          case 16: {
            MaskBits = input.ReadInt32();
            break;
          }
          case 24: {
            GroupIndex = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CategoryBits = input.ReadInt32();
            break;
          }
          case 16: {
            MaskBits = input.ReadInt32();
            break;
          }
          case 24: {
            GroupIndex = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// just include all fields we might use
  /// </summary>
  public sealed partial class PbShape : pb::IMessage<PbShape>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PbShape> _parser = new pb::MessageParser<PbShape>(() => new PbShape());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PbShape> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Box2D.Box2DReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PbShape() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PbShape(PbShape other) : this() {
      _hasBits0 = other._hasBits0;
      tag_ = other.tag_;
      type_ = other.type_;
      center_ = other.center_ != null ? other.center_.Clone() : null;
      radius_ = other.radius_;
      points_ = other.points_.Clone();
      normals_ = other.normals_.Clone();
      centroid_ = other.centroid_ != null ? other.centroid_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PbShape Clone() {
      return new PbShape(this);
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 1;
    private readonly static long TagDefaultValue = 0L;

    private long tag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Tag {
      get { if ((_hasBits0 & 1) != 0) { return tag_; } else { return TagDefaultValue; } }
      set {
        _hasBits0 |= 1;
        tag_ = value;
      }
    }
    /// <summary>Gets whether the "tag" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTag {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "tag" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTag() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private readonly static global::Box2D.PbShapeType TypeDefaultValue = global::Box2D.PbShapeType.Circle;

    private global::Box2D.PbShapeType type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Box2D.PbShapeType Type {
      get { if ((_hasBits0 & 2) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "center" field.</summary>
    public const int CenterFieldNumber = 10;
    private global::Box2D.PbVec2 center_;
    /// <summary>
    /// circle
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Box2D.PbVec2 Center {
      get { return center_; }
      set {
        center_ = value;
      }
    }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 11;
    private readonly static float RadiusDefaultValue = 0F;

    private float radius_;
    /// <summary>
    /// circle
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Radius {
      get { if ((_hasBits0 & 4) != 0) { return radius_; } else { return RadiusDefaultValue; } }
      set {
        _hasBits0 |= 4;
        radius_ = value;
      }
    }
    /// <summary>Gets whether the "radius" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRadius {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "radius" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRadius() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "points" field.</summary>
    public const int PointsFieldNumber = 20;
    private static readonly pb::FieldCodec<global::Box2D.PbVec2> _repeated_points_codec
        = pb::FieldCodec.ForMessage(162, global::Box2D.PbVec2.Parser);
    private readonly pbc::RepeatedField<global::Box2D.PbVec2> points_ = new pbc::RepeatedField<global::Box2D.PbVec2>();
    /// <summary>
    /// polygon
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Box2D.PbVec2> Points {
      get { return points_; }
    }

    /// <summary>Field number for the "normals" field.</summary>
    public const int NormalsFieldNumber = 21;
    private static readonly pb::FieldCodec<global::Box2D.PbVec2> _repeated_normals_codec
        = pb::FieldCodec.ForMessage(170, global::Box2D.PbVec2.Parser);
    private readonly pbc::RepeatedField<global::Box2D.PbVec2> normals_ = new pbc::RepeatedField<global::Box2D.PbVec2>();
    /// <summary>
    /// polygon
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Box2D.PbVec2> Normals {
      get { return normals_; }
    }

    /// <summary>Field number for the "centroid" field.</summary>
    public const int CentroidFieldNumber = 22;
    private global::Box2D.PbVec2 centroid_;
    /// <summary>
    /// polygon
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Box2D.PbVec2 Centroid {
      get { return centroid_; }
      set {
        centroid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PbShape);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PbShape other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tag != other.Tag) return false;
      if (Type != other.Type) return false;
      if (!object.Equals(Center, other.Center)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Radius, other.Radius)) return false;
      if(!points_.Equals(other.points_)) return false;
      if(!normals_.Equals(other.normals_)) return false;
      if (!object.Equals(Centroid, other.Centroid)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTag) hash ^= Tag.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      if (center_ != null) hash ^= Center.GetHashCode();
      if (HasRadius) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Radius);
      hash ^= points_.GetHashCode();
      hash ^= normals_.GetHashCode();
      if (centroid_ != null) hash ^= Centroid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTag) {
        output.WriteRawTag(8);
        output.WriteInt64(Tag);
      }
      if (HasType) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (center_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Center);
      }
      if (HasRadius) {
        output.WriteRawTag(93);
        output.WriteFloat(Radius);
      }
      points_.WriteTo(output, _repeated_points_codec);
      normals_.WriteTo(output, _repeated_normals_codec);
      if (centroid_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(Centroid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTag) {
        output.WriteRawTag(8);
        output.WriteInt64(Tag);
      }
      if (HasType) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (center_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Center);
      }
      if (HasRadius) {
        output.WriteRawTag(93);
        output.WriteFloat(Radius);
      }
      points_.WriteTo(ref output, _repeated_points_codec);
      normals_.WriteTo(ref output, _repeated_normals_codec);
      if (centroid_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(Centroid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasTag) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Tag);
      }
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (center_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Center);
      }
      if (HasRadius) {
        size += 1 + 4;
      }
      size += points_.CalculateSize(_repeated_points_codec);
      size += normals_.CalculateSize(_repeated_normals_codec);
      if (centroid_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Centroid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PbShape other) {
      if (other == null) {
        return;
      }
      if (other.HasTag) {
        Tag = other.Tag;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.center_ != null) {
        if (center_ == null) {
          Center = new global::Box2D.PbVec2();
        }
        Center.MergeFrom(other.Center);
      }
      if (other.HasRadius) {
        Radius = other.Radius;
      }
      points_.Add(other.points_);
      normals_.Add(other.normals_);
      if (other.centroid_ != null) {
        if (centroid_ == null) {
          Centroid = new global::Box2D.PbVec2();
        }
        Centroid.MergeFrom(other.Centroid);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Tag = input.ReadInt64();
            break;
          }
          case 16: {
            Type = (global::Box2D.PbShapeType) input.ReadEnum();
            break;
          }
          case 82: {
            if (center_ == null) {
              Center = new global::Box2D.PbVec2();
            }
            input.ReadMessage(Center);
            break;
          }
          case 93: {
            Radius = input.ReadFloat();
            break;
          }
          case 162: {
            points_.AddEntriesFrom(input, _repeated_points_codec);
            break;
          }
          case 170: {
            normals_.AddEntriesFrom(input, _repeated_normals_codec);
            break;
          }
          case 178: {
            if (centroid_ == null) {
              Centroid = new global::Box2D.PbVec2();
            }
            input.ReadMessage(Centroid);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Tag = input.ReadInt64();
            break;
          }
          case 16: {
            Type = (global::Box2D.PbShapeType) input.ReadEnum();
            break;
          }
          case 82: {
            if (center_ == null) {
              Center = new global::Box2D.PbVec2();
            }
            input.ReadMessage(Center);
            break;
          }
          case 93: {
            Radius = input.ReadFloat();
            break;
          }
          case 162: {
            points_.AddEntriesFrom(ref input, _repeated_points_codec);
            break;
          }
          case 170: {
            normals_.AddEntriesFrom(ref input, _repeated_normals_codec);
            break;
          }
          case 178: {
            if (centroid_ == null) {
              Centroid = new global::Box2D.PbVec2();
            }
            input.ReadMessage(Centroid);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PbFixture : pb::IMessage<PbFixture>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PbFixture> _parser = new pb::MessageParser<PbFixture>(() => new PbFixture());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PbFixture> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Box2D.Box2DReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PbFixture() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PbFixture(PbFixture other) : this() {
      _hasBits0 = other._hasBits0;
      tag_ = other.tag_;
      restitution_ = other.restitution_;
      friction_ = other.friction_;
      density_ = other.density_;
      sensor_ = other.sensor_;
      filter_ = other.filter_ != null ? other.filter_.Clone() : null;
      shape_ = other.shape_ != null ? other.shape_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PbFixture Clone() {
      return new PbFixture(this);
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 1;
    private readonly static long TagDefaultValue = 0L;

    private long tag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Tag {
      get { if ((_hasBits0 & 1) != 0) { return tag_; } else { return TagDefaultValue; } }
      set {
        _hasBits0 |= 1;
        tag_ = value;
      }
    }
    /// <summary>Gets whether the "tag" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTag {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "tag" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTag() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "restitution" field.</summary>
    public const int RestitutionFieldNumber = 2;
    private readonly static float RestitutionDefaultValue = 0F;

    private float restitution_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Restitution {
      get { if ((_hasBits0 & 2) != 0) { return restitution_; } else { return RestitutionDefaultValue; } }
      set {
        _hasBits0 |= 2;
        restitution_ = value;
      }
    }
    /// <summary>Gets whether the "restitution" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRestitution {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "restitution" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRestitution() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "friction" field.</summary>
    public const int FrictionFieldNumber = 3;
    private readonly static float FrictionDefaultValue = 0F;

    private float friction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Friction {
      get { if ((_hasBits0 & 4) != 0) { return friction_; } else { return FrictionDefaultValue; } }
      set {
        _hasBits0 |= 4;
        friction_ = value;
      }
    }
    /// <summary>Gets whether the "friction" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFriction {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "friction" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFriction() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "density" field.</summary>
    public const int DensityFieldNumber = 4;
    private readonly static float DensityDefaultValue = 0F;

    private float density_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Density {
      get { if ((_hasBits0 & 8) != 0) { return density_; } else { return DensityDefaultValue; } }
      set {
        _hasBits0 |= 8;
        density_ = value;
      }
    }
    /// <summary>Gets whether the "density" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDensity {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "density" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDensity() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "sensor" field.</summary>
    public const int SensorFieldNumber = 5;
    private readonly static bool SensorDefaultValue = false;

    private bool sensor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Sensor {
      get { if ((_hasBits0 & 16) != 0) { return sensor_; } else { return SensorDefaultValue; } }
      set {
        _hasBits0 |= 16;
        sensor_ = value;
      }
    }
    /// <summary>Gets whether the "sensor" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSensor {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "sensor" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSensor() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "filter" field.</summary>
    public const int FilterFieldNumber = 10;
    private global::Box2D.PbFilter filter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Box2D.PbFilter Filter {
      get { return filter_; }
      set {
        filter_ = value;
      }
    }

    /// <summary>Field number for the "shape" field.</summary>
    public const int ShapeFieldNumber = 11;
    private global::Box2D.PbShape shape_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Box2D.PbShape Shape {
      get { return shape_; }
      set {
        shape_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PbFixture);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PbFixture other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tag != other.Tag) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Restitution, other.Restitution)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Friction, other.Friction)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Density, other.Density)) return false;
      if (Sensor != other.Sensor) return false;
      if (!object.Equals(Filter, other.Filter)) return false;
      if (!object.Equals(Shape, other.Shape)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTag) hash ^= Tag.GetHashCode();
      if (HasRestitution) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Restitution);
      if (HasFriction) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Friction);
      if (HasDensity) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Density);
      if (HasSensor) hash ^= Sensor.GetHashCode();
      if (filter_ != null) hash ^= Filter.GetHashCode();
      if (shape_ != null) hash ^= Shape.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTag) {
        output.WriteRawTag(8);
        output.WriteInt64(Tag);
      }
      if (HasRestitution) {
        output.WriteRawTag(21);
        output.WriteFloat(Restitution);
      }
      if (HasFriction) {
        output.WriteRawTag(29);
        output.WriteFloat(Friction);
      }
      if (HasDensity) {
        output.WriteRawTag(37);
        output.WriteFloat(Density);
      }
      if (HasSensor) {
        output.WriteRawTag(40);
        output.WriteBool(Sensor);
      }
      if (filter_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Filter);
      }
      if (shape_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Shape);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTag) {
        output.WriteRawTag(8);
        output.WriteInt64(Tag);
      }
      if (HasRestitution) {
        output.WriteRawTag(21);
        output.WriteFloat(Restitution);
      }
      if (HasFriction) {
        output.WriteRawTag(29);
        output.WriteFloat(Friction);
      }
      if (HasDensity) {
        output.WriteRawTag(37);
        output.WriteFloat(Density);
      }
      if (HasSensor) {
        output.WriteRawTag(40);
        output.WriteBool(Sensor);
      }
      if (filter_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Filter);
      }
      if (shape_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Shape);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasTag) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Tag);
      }
      if (HasRestitution) {
        size += 1 + 4;
      }
      if (HasFriction) {
        size += 1 + 4;
      }
      if (HasDensity) {
        size += 1 + 4;
      }
      if (HasSensor) {
        size += 1 + 1;
      }
      if (filter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Filter);
      }
      if (shape_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Shape);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PbFixture other) {
      if (other == null) {
        return;
      }
      if (other.HasTag) {
        Tag = other.Tag;
      }
      if (other.HasRestitution) {
        Restitution = other.Restitution;
      }
      if (other.HasFriction) {
        Friction = other.Friction;
      }
      if (other.HasDensity) {
        Density = other.Density;
      }
      if (other.HasSensor) {
        Sensor = other.Sensor;
      }
      if (other.filter_ != null) {
        if (filter_ == null) {
          Filter = new global::Box2D.PbFilter();
        }
        Filter.MergeFrom(other.Filter);
      }
      if (other.shape_ != null) {
        if (shape_ == null) {
          Shape = new global::Box2D.PbShape();
        }
        Shape.MergeFrom(other.Shape);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Tag = input.ReadInt64();
            break;
          }
          case 21: {
            Restitution = input.ReadFloat();
            break;
          }
          case 29: {
            Friction = input.ReadFloat();
            break;
          }
          case 37: {
            Density = input.ReadFloat();
            break;
          }
          case 40: {
            Sensor = input.ReadBool();
            break;
          }
          case 82: {
            if (filter_ == null) {
              Filter = new global::Box2D.PbFilter();
            }
            input.ReadMessage(Filter);
            break;
          }
          case 90: {
            if (shape_ == null) {
              Shape = new global::Box2D.PbShape();
            }
            input.ReadMessage(Shape);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Tag = input.ReadInt64();
            break;
          }
          case 21: {
            Restitution = input.ReadFloat();
            break;
          }
          case 29: {
            Friction = input.ReadFloat();
            break;
          }
          case 37: {
            Density = input.ReadFloat();
            break;
          }
          case 40: {
            Sensor = input.ReadBool();
            break;
          }
          case 82: {
            if (filter_ == null) {
              Filter = new global::Box2D.PbFilter();
            }
            input.ReadMessage(Filter);
            break;
          }
          case 90: {
            if (shape_ == null) {
              Shape = new global::Box2D.PbShape();
            }
            input.ReadMessage(Shape);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PbJoint : pb::IMessage<PbJoint>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PbJoint> _parser = new pb::MessageParser<PbJoint>(() => new PbJoint());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PbJoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Box2D.Box2DReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PbJoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PbJoint(PbJoint other) : this() {
      _hasBits0 = other._hasBits0;
      tag_ = other.tag_;
      type_ = other.type_;
      bodyA_ = other.bodyA_;
      bodyB_ = other.bodyB_;
      collideConnected_ = other.collideConnected_;
      localAnchorA_ = other.localAnchorA_ != null ? other.localAnchorA_.Clone() : null;
      localAnchorB_ = other.localAnchorB_ != null ? other.localAnchorB_.Clone() : null;
      refAngle_ = other.refAngle_;
      enableLimit_ = other.enableLimit_;
      lowerLimit_ = other.lowerLimit_;
      upperLimit_ = other.upperLimit_;
      enableMotor_ = other.enableMotor_;
      motorSpeed_ = other.motorSpeed_;
      maxMotorTorque_ = other.maxMotorTorque_;
      localAxisA_ = other.localAxisA_ != null ? other.localAxisA_.Clone() : null;
      maxMotorForce_ = other.maxMotorForce_;
      length_ = other.length_;
      frequency_ = other.frequency_;
      dampingRatio_ = other.dampingRatio_;
      groundAnchorA_ = other.groundAnchorA_ != null ? other.groundAnchorA_.Clone() : null;
      groundAnchorB_ = other.groundAnchorB_ != null ? other.groundAnchorB_.Clone() : null;
      lengthA_ = other.lengthA_;
      lengthB_ = other.lengthB_;
      ratio_ = other.ratio_;
      maxLengthA_ = other.maxLengthA_;
      maxLengthB_ = other.maxLengthB_;
      target_ = other.target_ != null ? other.target_.Clone() : null;
      maxForce_ = other.maxForce_;
      joint1_ = other.joint1_;
      joint2_ = other.joint2_;
      springFrequency_ = other.springFrequency_;
      springDampingRatio_ = other.springDampingRatio_;
      maxTorque_ = other.maxTorque_;
      maxLength_ = other.maxLength_;
      bodies_ = other.bodies_.Clone();
      joints_ = other.joints_.Clone();
      targetVolume_ = other.targetVolume_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PbJoint Clone() {
      return new PbJoint(this);
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 1;
    private readonly static long TagDefaultValue = 0L;

    private long tag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Tag {
      get { if ((_hasBits0 & 1) != 0) { return tag_; } else { return TagDefaultValue; } }
      set {
        _hasBits0 |= 1;
        tag_ = value;
      }
    }
    /// <summary>Gets whether the "tag" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTag {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "tag" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTag() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private readonly static global::Box2D.PbJointType TypeDefaultValue = global::Box2D.PbJointType.Distance;

    private global::Box2D.PbJointType type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Box2D.PbJointType Type {
      get { if ((_hasBits0 & 2) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "body_a" field.</summary>
    public const int BodyAFieldNumber = 3;
    private readonly static int BodyADefaultValue = 0;

    private int bodyA_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BodyA {
      get { if ((_hasBits0 & 4) != 0) { return bodyA_; } else { return BodyADefaultValue; } }
      set {
        _hasBits0 |= 4;
        bodyA_ = value;
      }
    }
    /// <summary>Gets whether the "body_a" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBodyA {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "body_a" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBodyA() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "body_b" field.</summary>
    public const int BodyBFieldNumber = 4;
    private readonly static int BodyBDefaultValue = 0;

    private int bodyB_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BodyB {
      get { if ((_hasBits0 & 8) != 0) { return bodyB_; } else { return BodyBDefaultValue; } }
      set {
        _hasBits0 |= 8;
        bodyB_ = value;
      }
    }
    /// <summary>Gets whether the "body_b" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBodyB {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "body_b" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBodyB() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "collideConnected" field.</summary>
    public const int CollideConnectedFieldNumber = 5;
    private readonly static bool CollideConnectedDefaultValue = false;

    private bool collideConnected_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool CollideConnected {
      get { if ((_hasBits0 & 16) != 0) { return collideConnected_; } else { return CollideConnectedDefaultValue; } }
      set {
        _hasBits0 |= 16;
        collideConnected_ = value;
      }
    }
    /// <summary>Gets whether the "collideConnected" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCollideConnected {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "collideConnected" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCollideConnected() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "local_anchor_a" field.</summary>
    public const int LocalAnchorAFieldNumber = 6;
    private global::Box2D.PbVec2 localAnchorA_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Box2D.PbVec2 LocalAnchorA {
      get { return localAnchorA_; }
      set {
        localAnchorA_ = value;
      }
    }

    /// <summary>Field number for the "local_anchor_b" field.</summary>
    public const int LocalAnchorBFieldNumber = 7;
    private global::Box2D.PbVec2 localAnchorB_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Box2D.PbVec2 LocalAnchorB {
      get { return localAnchorB_; }
      set {
        localAnchorB_ = value;
      }
    }

    /// <summary>Field number for the "ref_angle" field.</summary>
    public const int RefAngleFieldNumber = 10;
    private readonly static float RefAngleDefaultValue = 0F;

    private float refAngle_;
    /// <summary>
    /// used by: revolute, prismatic, joint
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RefAngle {
      get { if ((_hasBits0 & 32) != 0) { return refAngle_; } else { return RefAngleDefaultValue; } }
      set {
        _hasBits0 |= 32;
        refAngle_ = value;
      }
    }
    /// <summary>Gets whether the "ref_angle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRefAngle {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "ref_angle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRefAngle() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "enable_limit" field.</summary>
    public const int EnableLimitFieldNumber = 12;
    private readonly static bool EnableLimitDefaultValue = false;

    private bool enableLimit_;
    /// <summary>
    /// used by: revolute, prismatic, line
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool EnableLimit {
      get { if ((_hasBits0 & 64) != 0) { return enableLimit_; } else { return EnableLimitDefaultValue; } }
      set {
        _hasBits0 |= 64;
        enableLimit_ = value;
      }
    }
    /// <summary>Gets whether the "enable_limit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEnableLimit {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "enable_limit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEnableLimit() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "lower_limit" field.</summary>
    public const int LowerLimitFieldNumber = 13;
    private readonly static float LowerLimitDefaultValue = 0F;

    private float lowerLimit_;
    /// <summary>
    /// used by: revolute, prismatic, line
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float LowerLimit {
      get { if ((_hasBits0 & 128) != 0) { return lowerLimit_; } else { return LowerLimitDefaultValue; } }
      set {
        _hasBits0 |= 128;
        lowerLimit_ = value;
      }
    }
    /// <summary>Gets whether the "lower_limit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLowerLimit {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "lower_limit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLowerLimit() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "upper_limit" field.</summary>
    public const int UpperLimitFieldNumber = 14;
    private readonly static float UpperLimitDefaultValue = 0F;

    private float upperLimit_;
    /// <summary>
    /// used by: revolute, prismatic, line
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float UpperLimit {
      get { if ((_hasBits0 & 256) != 0) { return upperLimit_; } else { return UpperLimitDefaultValue; } }
      set {
        _hasBits0 |= 256;
        upperLimit_ = value;
      }
    }
    /// <summary>Gets whether the "upper_limit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUpperLimit {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "upper_limit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUpperLimit() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "enable_motor" field.</summary>
    public const int EnableMotorFieldNumber = 15;
    private readonly static bool EnableMotorDefaultValue = false;

    private bool enableMotor_;
    /// <summary>
    /// used by: revolute, prismatic, wheel, line
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool EnableMotor {
      get { if ((_hasBits0 & 512) != 0) { return enableMotor_; } else { return EnableMotorDefaultValue; } }
      set {
        _hasBits0 |= 512;
        enableMotor_ = value;
      }
    }
    /// <summary>Gets whether the "enable_motor" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEnableMotor {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "enable_motor" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEnableMotor() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "motor_speed" field.</summary>
    public const int MotorSpeedFieldNumber = 16;
    private readonly static float MotorSpeedDefaultValue = 0F;

    private float motorSpeed_;
    /// <summary>
    /// used by: revolute, prismatic, wheel
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MotorSpeed {
      get { if ((_hasBits0 & 1024) != 0) { return motorSpeed_; } else { return MotorSpeedDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        motorSpeed_ = value;
      }
    }
    /// <summary>Gets whether the "motor_speed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMotorSpeed {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "motor_speed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMotorSpeed() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "max_motor_torque" field.</summary>
    public const int MaxMotorTorqueFieldNumber = 17;
    private readonly static float MaxMotorTorqueDefaultValue = 0F;

    private float maxMotorTorque_;
    /// <summary>
    /// used by: revolute, wheel
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxMotorTorque {
      get { if ((_hasBits0 & 2048) != 0) { return maxMotorTorque_; } else { return MaxMotorTorqueDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        maxMotorTorque_ = value;
      }
    }
    /// <summary>Gets whether the "max_motor_torque" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxMotorTorque {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "max_motor_torque" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxMotorTorque() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "local_axis_a" field.</summary>
    public const int LocalAxisAFieldNumber = 20;
    private global::Box2D.PbVec2 localAxisA_;
    /// <summary>
    /// used by: prismatic, wheel, line
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Box2D.PbVec2 LocalAxisA {
      get { return localAxisA_; }
      set {
        localAxisA_ = value;
      }
    }

    /// <summary>Field number for the "max_motor_force" field.</summary>
    public const int MaxMotorForceFieldNumber = 21;
    private readonly static float MaxMotorForceDefaultValue = 0F;

    private float maxMotorForce_;
    /// <summary>
    /// used by: prismatic, line
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxMotorForce {
      get { if ((_hasBits0 & 4096) != 0) { return maxMotorForce_; } else { return MaxMotorForceDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        maxMotorForce_ = value;
      }
    }
    /// <summary>Gets whether the "max_motor_force" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxMotorForce {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "max_motor_force" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxMotorForce() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "length" field.</summary>
    public const int LengthFieldNumber = 30;
    private readonly static float LengthDefaultValue = 0F;

    private float length_;
    /// <summary>
    /// used by: distance
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Length {
      get { if ((_hasBits0 & 8192) != 0) { return length_; } else { return LengthDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        length_ = value;
      }
    }
    /// <summary>Gets whether the "length" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLength {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "length" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLength() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "frequency" field.</summary>
    public const int FrequencyFieldNumber = 31;
    private readonly static float FrequencyDefaultValue = 0F;

    private float frequency_;
    /// <summary>
    /// used by: distance, mouse, con vol
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Frequency {
      get { if ((_hasBits0 & 16384) != 0) { return frequency_; } else { return FrequencyDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        frequency_ = value;
      }
    }
    /// <summary>Gets whether the "frequency" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFrequency {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "frequency" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFrequency() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "damping_ratio" field.</summary>
    public const int DampingRatioFieldNumber = 32;
    private readonly static float DampingRatioDefaultValue = 0F;

    private float dampingRatio_;
    /// <summary>
    /// used by: distance, mouse, col vol
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DampingRatio {
      get { if ((_hasBits0 & 32768) != 0) { return dampingRatio_; } else { return DampingRatioDefaultValue; } }
      set {
        _hasBits0 |= 32768;
        dampingRatio_ = value;
      }
    }
    /// <summary>Gets whether the "damping_ratio" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDampingRatio {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "damping_ratio" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDampingRatio() {
      _hasBits0 &= ~32768;
    }

    /// <summary>Field number for the "ground_anchor_a" field.</summary>
    public const int GroundAnchorAFieldNumber = 40;
    private global::Box2D.PbVec2 groundAnchorA_;
    /// <summary>
    /// used by: pulley
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Box2D.PbVec2 GroundAnchorA {
      get { return groundAnchorA_; }
      set {
        groundAnchorA_ = value;
      }
    }

    /// <summary>Field number for the "ground_anchor_b" field.</summary>
    public const int GroundAnchorBFieldNumber = 41;
    private global::Box2D.PbVec2 groundAnchorB_;
    /// <summary>
    /// used by: pulley
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Box2D.PbVec2 GroundAnchorB {
      get { return groundAnchorB_; }
      set {
        groundAnchorB_ = value;
      }
    }

    /// <summary>Field number for the "length_a" field.</summary>
    public const int LengthAFieldNumber = 42;
    private readonly static float LengthADefaultValue = 0F;

    private float lengthA_;
    /// <summary>
    /// used by: pulley
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float LengthA {
      get { if ((_hasBits0 & 65536) != 0) { return lengthA_; } else { return LengthADefaultValue; } }
      set {
        _hasBits0 |= 65536;
        lengthA_ = value;
      }
    }
    /// <summary>Gets whether the "length_a" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLengthA {
      get { return (_hasBits0 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "length_a" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLengthA() {
      _hasBits0 &= ~65536;
    }

    /// <summary>Field number for the "length_b" field.</summary>
    public const int LengthBFieldNumber = 43;
    private readonly static float LengthBDefaultValue = 0F;

    private float lengthB_;
    /// <summary>
    /// used by: pulley
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float LengthB {
      get { if ((_hasBits0 & 131072) != 0) { return lengthB_; } else { return LengthBDefaultValue; } }
      set {
        _hasBits0 |= 131072;
        lengthB_ = value;
      }
    }
    /// <summary>Gets whether the "length_b" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLengthB {
      get { return (_hasBits0 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "length_b" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLengthB() {
      _hasBits0 &= ~131072;
    }

    /// <summary>Field number for the "ratio" field.</summary>
    public const int RatioFieldNumber = 44;
    private readonly static float RatioDefaultValue = 0F;

    private float ratio_;
    /// <summary>
    /// used by: pulley, gear
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Ratio {
      get { if ((_hasBits0 & 262144) != 0) { return ratio_; } else { return RatioDefaultValue; } }
      set {
        _hasBits0 |= 262144;
        ratio_ = value;
      }
    }
    /// <summary>Gets whether the "ratio" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRatio {
      get { return (_hasBits0 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "ratio" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRatio() {
      _hasBits0 &= ~262144;
    }

    /// <summary>Field number for the "max_length_a" field.</summary>
    public const int MaxLengthAFieldNumber = 45;
    private readonly static float MaxLengthADefaultValue = 0F;

    private float maxLengthA_;
    /// <summary>
    /// used by: pulley
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxLengthA {
      get { if ((_hasBits0 & 524288) != 0) { return maxLengthA_; } else { return MaxLengthADefaultValue; } }
      set {
        _hasBits0 |= 524288;
        maxLengthA_ = value;
      }
    }
    /// <summary>Gets whether the "max_length_a" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxLengthA {
      get { return (_hasBits0 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "max_length_a" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxLengthA() {
      _hasBits0 &= ~524288;
    }

    /// <summary>Field number for the "max_length_b" field.</summary>
    public const int MaxLengthBFieldNumber = 46;
    private readonly static float MaxLengthBDefaultValue = 0F;

    private float maxLengthB_;
    /// <summary>
    /// used by: pulley
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxLengthB {
      get { if ((_hasBits0 & 1048576) != 0) { return maxLengthB_; } else { return MaxLengthBDefaultValue; } }
      set {
        _hasBits0 |= 1048576;
        maxLengthB_ = value;
      }
    }
    /// <summary>Gets whether the "max_length_b" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxLengthB {
      get { return (_hasBits0 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "max_length_b" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxLengthB() {
      _hasBits0 &= ~1048576;
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 50;
    private global::Box2D.PbVec2 target_;
    /// <summary>
    /// used by: mouse
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Box2D.PbVec2 Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    /// <summary>Field number for the "max_force" field.</summary>
    public const int MaxForceFieldNumber = 51;
    private readonly static float MaxForceDefaultValue = 0F;

    private float maxForce_;
    /// <summary>
    /// used by: mouse, friction, rope
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxForce {
      get { if ((_hasBits0 & 2097152) != 0) { return maxForce_; } else { return MaxForceDefaultValue; } }
      set {
        _hasBits0 |= 2097152;
        maxForce_ = value;
      }
    }
    /// <summary>Gets whether the "max_force" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxForce {
      get { return (_hasBits0 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "max_force" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxForce() {
      _hasBits0 &= ~2097152;
    }

    /// <summary>Field number for the "joint1" field.</summary>
    public const int Joint1FieldNumber = 61;
    private readonly static int Joint1DefaultValue = 0;

    private int joint1_;
    /// <summary>
    /// used by: gear
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Joint1 {
      get { if ((_hasBits0 & 4194304) != 0) { return joint1_; } else { return Joint1DefaultValue; } }
      set {
        _hasBits0 |= 4194304;
        joint1_ = value;
      }
    }
    /// <summary>Gets whether the "joint1" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasJoint1 {
      get { return (_hasBits0 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "joint1" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearJoint1() {
      _hasBits0 &= ~4194304;
    }

    /// <summary>Field number for the "joint2" field.</summary>
    public const int Joint2FieldNumber = 62;
    private readonly static int Joint2DefaultValue = 0;

    private int joint2_;
    /// <summary>
    /// used by: gear
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Joint2 {
      get { if ((_hasBits0 & 8388608) != 0) { return joint2_; } else { return Joint2DefaultValue; } }
      set {
        _hasBits0 |= 8388608;
        joint2_ = value;
      }
    }
    /// <summary>Gets whether the "joint2" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasJoint2 {
      get { return (_hasBits0 & 8388608) != 0; }
    }
    /// <summary>Clears the value of the "joint2" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearJoint2() {
      _hasBits0 &= ~8388608;
    }

    /// <summary>Field number for the "spring_frequency" field.</summary>
    public const int SpringFrequencyFieldNumber = 70;
    private readonly static float SpringFrequencyDefaultValue = 0F;

    private float springFrequency_;
    /// <summary>
    /// used by: wheel
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SpringFrequency {
      get { if ((_hasBits0 & 16777216) != 0) { return springFrequency_; } else { return SpringFrequencyDefaultValue; } }
      set {
        _hasBits0 |= 16777216;
        springFrequency_ = value;
      }
    }
    /// <summary>Gets whether the "spring_frequency" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSpringFrequency {
      get { return (_hasBits0 & 16777216) != 0; }
    }
    /// <summary>Clears the value of the "spring_frequency" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSpringFrequency() {
      _hasBits0 &= ~16777216;
    }

    /// <summary>Field number for the "spring_damping_ratio" field.</summary>
    public const int SpringDampingRatioFieldNumber = 71;
    private readonly static float SpringDampingRatioDefaultValue = 0F;

    private float springDampingRatio_;
    /// <summary>
    /// used by: wheel
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SpringDampingRatio {
      get { if ((_hasBits0 & 33554432) != 0) { return springDampingRatio_; } else { return SpringDampingRatioDefaultValue; } }
      set {
        _hasBits0 |= 33554432;
        springDampingRatio_ = value;
      }
    }
    /// <summary>Gets whether the "spring_damping_ratio" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSpringDampingRatio {
      get { return (_hasBits0 & 33554432) != 0; }
    }
    /// <summary>Clears the value of the "spring_damping_ratio" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSpringDampingRatio() {
      _hasBits0 &= ~33554432;
    }

    /// <summary>Field number for the "max_torque" field.</summary>
    public const int MaxTorqueFieldNumber = 90;
    private readonly static float MaxTorqueDefaultValue = 0F;

    private float maxTorque_;
    /// <summary>
    /// used by: friction
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxTorque {
      get { if ((_hasBits0 & 67108864) != 0) { return maxTorque_; } else { return MaxTorqueDefaultValue; } }
      set {
        _hasBits0 |= 67108864;
        maxTorque_ = value;
      }
    }
    /// <summary>Gets whether the "max_torque" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxTorque {
      get { return (_hasBits0 & 67108864) != 0; }
    }
    /// <summary>Clears the value of the "max_torque" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxTorque() {
      _hasBits0 &= ~67108864;
    }

    /// <summary>Field number for the "max_length" field.</summary>
    public const int MaxLengthFieldNumber = 100;
    private readonly static float MaxLengthDefaultValue = 0F;

    private float maxLength_;
    /// <summary>
    /// used by: rope
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxLength {
      get { if ((_hasBits0 & 134217728) != 0) { return maxLength_; } else { return MaxLengthDefaultValue; } }
      set {
        _hasBits0 |= 134217728;
        maxLength_ = value;
      }
    }
    /// <summary>Gets whether the "max_length" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxLength {
      get { return (_hasBits0 & 134217728) != 0; }
    }
    /// <summary>Clears the value of the "max_length" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxLength() {
      _hasBits0 &= ~134217728;
    }

    /// <summary>Field number for the "bodies" field.</summary>
    public const int BodiesFieldNumber = 110;
    private static readonly pb::FieldCodec<int> _repeated_bodies_codec
        = pb::FieldCodec.ForInt32(880);
    private readonly pbc::RepeatedField<int> bodies_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// used by: con vol
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> Bodies {
      get { return bodies_; }
    }

    /// <summary>Field number for the "joints" field.</summary>
    public const int JointsFieldNumber = 111;
    private static readonly pb::FieldCodec<int> _repeated_joints_codec
        = pb::FieldCodec.ForInt32(888);
    private readonly pbc::RepeatedField<int> joints_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// used by: con vol
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> Joints {
      get { return joints_; }
    }

    /// <summary>Field number for the "target_volume" field.</summary>
    public const int TargetVolumeFieldNumber = 112;
    private readonly static float TargetVolumeDefaultValue = 0F;

    private float targetVolume_;
    /// <summary>
    /// used by: con vol
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TargetVolume {
      get { if ((_hasBits0 & 268435456) != 0) { return targetVolume_; } else { return TargetVolumeDefaultValue; } }
      set {
        _hasBits0 |= 268435456;
        targetVolume_ = value;
      }
    }
    /// <summary>Gets whether the "target_volume" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTargetVolume {
      get { return (_hasBits0 & 268435456) != 0; }
    }
    /// <summary>Clears the value of the "target_volume" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTargetVolume() {
      _hasBits0 &= ~268435456;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PbJoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PbJoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tag != other.Tag) return false;
      if (Type != other.Type) return false;
      if (BodyA != other.BodyA) return false;
      if (BodyB != other.BodyB) return false;
      if (CollideConnected != other.CollideConnected) return false;
      if (!object.Equals(LocalAnchorA, other.LocalAnchorA)) return false;
      if (!object.Equals(LocalAnchorB, other.LocalAnchorB)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RefAngle, other.RefAngle)) return false;
      if (EnableLimit != other.EnableLimit) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LowerLimit, other.LowerLimit)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UpperLimit, other.UpperLimit)) return false;
      if (EnableMotor != other.EnableMotor) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MotorSpeed, other.MotorSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxMotorTorque, other.MaxMotorTorque)) return false;
      if (!object.Equals(LocalAxisA, other.LocalAxisA)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxMotorForce, other.MaxMotorForce)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Length, other.Length)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Frequency, other.Frequency)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DampingRatio, other.DampingRatio)) return false;
      if (!object.Equals(GroundAnchorA, other.GroundAnchorA)) return false;
      if (!object.Equals(GroundAnchorB, other.GroundAnchorB)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LengthA, other.LengthA)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LengthB, other.LengthB)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ratio, other.Ratio)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxLengthA, other.MaxLengthA)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxLengthB, other.MaxLengthB)) return false;
      if (!object.Equals(Target, other.Target)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxForce, other.MaxForce)) return false;
      if (Joint1 != other.Joint1) return false;
      if (Joint2 != other.Joint2) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpringFrequency, other.SpringFrequency)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpringDampingRatio, other.SpringDampingRatio)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxTorque, other.MaxTorque)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxLength, other.MaxLength)) return false;
      if(!bodies_.Equals(other.bodies_)) return false;
      if(!joints_.Equals(other.joints_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TargetVolume, other.TargetVolume)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTag) hash ^= Tag.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      if (HasBodyA) hash ^= BodyA.GetHashCode();
      if (HasBodyB) hash ^= BodyB.GetHashCode();
      if (HasCollideConnected) hash ^= CollideConnected.GetHashCode();
      if (localAnchorA_ != null) hash ^= LocalAnchorA.GetHashCode();
      if (localAnchorB_ != null) hash ^= LocalAnchorB.GetHashCode();
      if (HasRefAngle) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RefAngle);
      if (HasEnableLimit) hash ^= EnableLimit.GetHashCode();
      if (HasLowerLimit) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LowerLimit);
      if (HasUpperLimit) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UpperLimit);
      if (HasEnableMotor) hash ^= EnableMotor.GetHashCode();
      if (HasMotorSpeed) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MotorSpeed);
      if (HasMaxMotorTorque) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxMotorTorque);
      if (localAxisA_ != null) hash ^= LocalAxisA.GetHashCode();
      if (HasMaxMotorForce) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxMotorForce);
      if (HasLength) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Length);
      if (HasFrequency) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Frequency);
      if (HasDampingRatio) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DampingRatio);
      if (groundAnchorA_ != null) hash ^= GroundAnchorA.GetHashCode();
      if (groundAnchorB_ != null) hash ^= GroundAnchorB.GetHashCode();
      if (HasLengthA) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LengthA);
      if (HasLengthB) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LengthB);
      if (HasRatio) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ratio);
      if (HasMaxLengthA) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxLengthA);
      if (HasMaxLengthB) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxLengthB);
      if (target_ != null) hash ^= Target.GetHashCode();
      if (HasMaxForce) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxForce);
      if (HasJoint1) hash ^= Joint1.GetHashCode();
      if (HasJoint2) hash ^= Joint2.GetHashCode();
      if (HasSpringFrequency) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpringFrequency);
      if (HasSpringDampingRatio) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpringDampingRatio);
      if (HasMaxTorque) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxTorque);
      if (HasMaxLength) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxLength);
      hash ^= bodies_.GetHashCode();
      hash ^= joints_.GetHashCode();
      if (HasTargetVolume) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TargetVolume);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTag) {
        output.WriteRawTag(8);
        output.WriteInt64(Tag);
      }
      if (HasType) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (HasBodyA) {
        output.WriteRawTag(24);
        output.WriteInt32(BodyA);
      }
      if (HasBodyB) {
        output.WriteRawTag(32);
        output.WriteInt32(BodyB);
      }
      if (HasCollideConnected) {
        output.WriteRawTag(40);
        output.WriteBool(CollideConnected);
      }
      if (localAnchorA_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(LocalAnchorA);
      }
      if (localAnchorB_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(LocalAnchorB);
      }
      if (HasRefAngle) {
        output.WriteRawTag(85);
        output.WriteFloat(RefAngle);
      }
      if (HasEnableLimit) {
        output.WriteRawTag(96);
        output.WriteBool(EnableLimit);
      }
      if (HasLowerLimit) {
        output.WriteRawTag(109);
        output.WriteFloat(LowerLimit);
      }
      if (HasUpperLimit) {
        output.WriteRawTag(117);
        output.WriteFloat(UpperLimit);
      }
      if (HasEnableMotor) {
        output.WriteRawTag(120);
        output.WriteBool(EnableMotor);
      }
      if (HasMotorSpeed) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(MotorSpeed);
      }
      if (HasMaxMotorTorque) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(MaxMotorTorque);
      }
      if (localAxisA_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(LocalAxisA);
      }
      if (HasMaxMotorForce) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(MaxMotorForce);
      }
      if (HasLength) {
        output.WriteRawTag(245, 1);
        output.WriteFloat(Length);
      }
      if (HasFrequency) {
        output.WriteRawTag(253, 1);
        output.WriteFloat(Frequency);
      }
      if (HasDampingRatio) {
        output.WriteRawTag(133, 2);
        output.WriteFloat(DampingRatio);
      }
      if (groundAnchorA_ != null) {
        output.WriteRawTag(194, 2);
        output.WriteMessage(GroundAnchorA);
      }
      if (groundAnchorB_ != null) {
        output.WriteRawTag(202, 2);
        output.WriteMessage(GroundAnchorB);
      }
      if (HasLengthA) {
        output.WriteRawTag(213, 2);
        output.WriteFloat(LengthA);
      }
      if (HasLengthB) {
        output.WriteRawTag(221, 2);
        output.WriteFloat(LengthB);
      }
      if (HasRatio) {
        output.WriteRawTag(229, 2);
        output.WriteFloat(Ratio);
      }
      if (HasMaxLengthA) {
        output.WriteRawTag(237, 2);
        output.WriteFloat(MaxLengthA);
      }
      if (HasMaxLengthB) {
        output.WriteRawTag(245, 2);
        output.WriteFloat(MaxLengthB);
      }
      if (target_ != null) {
        output.WriteRawTag(146, 3);
        output.WriteMessage(Target);
      }
      if (HasMaxForce) {
        output.WriteRawTag(157, 3);
        output.WriteFloat(MaxForce);
      }
      if (HasJoint1) {
        output.WriteRawTag(232, 3);
        output.WriteInt32(Joint1);
      }
      if (HasJoint2) {
        output.WriteRawTag(240, 3);
        output.WriteInt32(Joint2);
      }
      if (HasSpringFrequency) {
        output.WriteRawTag(181, 4);
        output.WriteFloat(SpringFrequency);
      }
      if (HasSpringDampingRatio) {
        output.WriteRawTag(189, 4);
        output.WriteFloat(SpringDampingRatio);
      }
      if (HasMaxTorque) {
        output.WriteRawTag(213, 5);
        output.WriteFloat(MaxTorque);
      }
      if (HasMaxLength) {
        output.WriteRawTag(165, 6);
        output.WriteFloat(MaxLength);
      }
      bodies_.WriteTo(output, _repeated_bodies_codec);
      joints_.WriteTo(output, _repeated_joints_codec);
      if (HasTargetVolume) {
        output.WriteRawTag(133, 7);
        output.WriteFloat(TargetVolume);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTag) {
        output.WriteRawTag(8);
        output.WriteInt64(Tag);
      }
      if (HasType) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (HasBodyA) {
        output.WriteRawTag(24);
        output.WriteInt32(BodyA);
      }
      if (HasBodyB) {
        output.WriteRawTag(32);
        output.WriteInt32(BodyB);
      }
      if (HasCollideConnected) {
        output.WriteRawTag(40);
        output.WriteBool(CollideConnected);
      }
      if (localAnchorA_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(LocalAnchorA);
      }
      if (localAnchorB_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(LocalAnchorB);
      }
      if (HasRefAngle) {
        output.WriteRawTag(85);
        output.WriteFloat(RefAngle);
      }
      if (HasEnableLimit) {
        output.WriteRawTag(96);
        output.WriteBool(EnableLimit);
      }
      if (HasLowerLimit) {
        output.WriteRawTag(109);
        output.WriteFloat(LowerLimit);
      }
      if (HasUpperLimit) {
        output.WriteRawTag(117);
        output.WriteFloat(UpperLimit);
      }
      if (HasEnableMotor) {
        output.WriteRawTag(120);
        output.WriteBool(EnableMotor);
      }
      if (HasMotorSpeed) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(MotorSpeed);
      }
      if (HasMaxMotorTorque) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(MaxMotorTorque);
      }
      if (localAxisA_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(LocalAxisA);
      }
      if (HasMaxMotorForce) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(MaxMotorForce);
      }
      if (HasLength) {
        output.WriteRawTag(245, 1);
        output.WriteFloat(Length);
      }
      if (HasFrequency) {
        output.WriteRawTag(253, 1);
        output.WriteFloat(Frequency);
      }
      if (HasDampingRatio) {
        output.WriteRawTag(133, 2);
        output.WriteFloat(DampingRatio);
      }
      if (groundAnchorA_ != null) {
        output.WriteRawTag(194, 2);
        output.WriteMessage(GroundAnchorA);
      }
      if (groundAnchorB_ != null) {
        output.WriteRawTag(202, 2);
        output.WriteMessage(GroundAnchorB);
      }
      if (HasLengthA) {
        output.WriteRawTag(213, 2);
        output.WriteFloat(LengthA);
      }
      if (HasLengthB) {
        output.WriteRawTag(221, 2);
        output.WriteFloat(LengthB);
      }
      if (HasRatio) {
        output.WriteRawTag(229, 2);
        output.WriteFloat(Ratio);
      }
      if (HasMaxLengthA) {
        output.WriteRawTag(237, 2);
        output.WriteFloat(MaxLengthA);
      }
      if (HasMaxLengthB) {
        output.WriteRawTag(245, 2);
        output.WriteFloat(MaxLengthB);
      }
      if (target_ != null) {
        output.WriteRawTag(146, 3);
        output.WriteMessage(Target);
      }
      if (HasMaxForce) {
        output.WriteRawTag(157, 3);
        output.WriteFloat(MaxForce);
      }
      if (HasJoint1) {
        output.WriteRawTag(232, 3);
        output.WriteInt32(Joint1);
      }
      if (HasJoint2) {
        output.WriteRawTag(240, 3);
        output.WriteInt32(Joint2);
      }
      if (HasSpringFrequency) {
        output.WriteRawTag(181, 4);
        output.WriteFloat(SpringFrequency);
      }
      if (HasSpringDampingRatio) {
        output.WriteRawTag(189, 4);
        output.WriteFloat(SpringDampingRatio);
      }
      if (HasMaxTorque) {
        output.WriteRawTag(213, 5);
        output.WriteFloat(MaxTorque);
      }
      if (HasMaxLength) {
        output.WriteRawTag(165, 6);
        output.WriteFloat(MaxLength);
      }
      bodies_.WriteTo(ref output, _repeated_bodies_codec);
      joints_.WriteTo(ref output, _repeated_joints_codec);
      if (HasTargetVolume) {
        output.WriteRawTag(133, 7);
        output.WriteFloat(TargetVolume);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasTag) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Tag);
      }
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (HasBodyA) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BodyA);
      }
      if (HasBodyB) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BodyB);
      }
      if (HasCollideConnected) {
        size += 1 + 1;
      }
      if (localAnchorA_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocalAnchorA);
      }
      if (localAnchorB_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocalAnchorB);
      }
      if (HasRefAngle) {
        size += 1 + 4;
      }
      if (HasEnableLimit) {
        size += 1 + 1;
      }
      if (HasLowerLimit) {
        size += 1 + 4;
      }
      if (HasUpperLimit) {
        size += 1 + 4;
      }
      if (HasEnableMotor) {
        size += 1 + 1;
      }
      if (HasMotorSpeed) {
        size += 2 + 4;
      }
      if (HasMaxMotorTorque) {
        size += 2 + 4;
      }
      if (localAxisA_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LocalAxisA);
      }
      if (HasMaxMotorForce) {
        size += 2 + 4;
      }
      if (HasLength) {
        size += 2 + 4;
      }
      if (HasFrequency) {
        size += 2 + 4;
      }
      if (HasDampingRatio) {
        size += 2 + 4;
      }
      if (groundAnchorA_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GroundAnchorA);
      }
      if (groundAnchorB_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GroundAnchorB);
      }
      if (HasLengthA) {
        size += 2 + 4;
      }
      if (HasLengthB) {
        size += 2 + 4;
      }
      if (HasRatio) {
        size += 2 + 4;
      }
      if (HasMaxLengthA) {
        size += 2 + 4;
      }
      if (HasMaxLengthB) {
        size += 2 + 4;
      }
      if (target_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Target);
      }
      if (HasMaxForce) {
        size += 2 + 4;
      }
      if (HasJoint1) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Joint1);
      }
      if (HasJoint2) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Joint2);
      }
      if (HasSpringFrequency) {
        size += 2 + 4;
      }
      if (HasSpringDampingRatio) {
        size += 2 + 4;
      }
      if (HasMaxTorque) {
        size += 2 + 4;
      }
      if (HasMaxLength) {
        size += 2 + 4;
      }
      size += bodies_.CalculateSize(_repeated_bodies_codec);
      size += joints_.CalculateSize(_repeated_joints_codec);
      if (HasTargetVolume) {
        size += 2 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PbJoint other) {
      if (other == null) {
        return;
      }
      if (other.HasTag) {
        Tag = other.Tag;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasBodyA) {
        BodyA = other.BodyA;
      }
      if (other.HasBodyB) {
        BodyB = other.BodyB;
      }
      if (other.HasCollideConnected) {
        CollideConnected = other.CollideConnected;
      }
      if (other.localAnchorA_ != null) {
        if (localAnchorA_ == null) {
          LocalAnchorA = new global::Box2D.PbVec2();
        }
        LocalAnchorA.MergeFrom(other.LocalAnchorA);
      }
      if (other.localAnchorB_ != null) {
        if (localAnchorB_ == null) {
          LocalAnchorB = new global::Box2D.PbVec2();
        }
        LocalAnchorB.MergeFrom(other.LocalAnchorB);
      }
      if (other.HasRefAngle) {
        RefAngle = other.RefAngle;
      }
      if (other.HasEnableLimit) {
        EnableLimit = other.EnableLimit;
      }
      if (other.HasLowerLimit) {
        LowerLimit = other.LowerLimit;
      }
      if (other.HasUpperLimit) {
        UpperLimit = other.UpperLimit;
      }
      if (other.HasEnableMotor) {
        EnableMotor = other.EnableMotor;
      }
      if (other.HasMotorSpeed) {
        MotorSpeed = other.MotorSpeed;
      }
      if (other.HasMaxMotorTorque) {
        MaxMotorTorque = other.MaxMotorTorque;
      }
      if (other.localAxisA_ != null) {
        if (localAxisA_ == null) {
          LocalAxisA = new global::Box2D.PbVec2();
        }
        LocalAxisA.MergeFrom(other.LocalAxisA);
      }
      if (other.HasMaxMotorForce) {
        MaxMotorForce = other.MaxMotorForce;
      }
      if (other.HasLength) {
        Length = other.Length;
      }
      if (other.HasFrequency) {
        Frequency = other.Frequency;
      }
      if (other.HasDampingRatio) {
        DampingRatio = other.DampingRatio;
      }
      if (other.groundAnchorA_ != null) {
        if (groundAnchorA_ == null) {
          GroundAnchorA = new global::Box2D.PbVec2();
        }
        GroundAnchorA.MergeFrom(other.GroundAnchorA);
      }
      if (other.groundAnchorB_ != null) {
        if (groundAnchorB_ == null) {
          GroundAnchorB = new global::Box2D.PbVec2();
        }
        GroundAnchorB.MergeFrom(other.GroundAnchorB);
      }
      if (other.HasLengthA) {
        LengthA = other.LengthA;
      }
      if (other.HasLengthB) {
        LengthB = other.LengthB;
      }
      if (other.HasRatio) {
        Ratio = other.Ratio;
      }
      if (other.HasMaxLengthA) {
        MaxLengthA = other.MaxLengthA;
      }
      if (other.HasMaxLengthB) {
        MaxLengthB = other.MaxLengthB;
      }
      if (other.target_ != null) {
        if (target_ == null) {
          Target = new global::Box2D.PbVec2();
        }
        Target.MergeFrom(other.Target);
      }
      if (other.HasMaxForce) {
        MaxForce = other.MaxForce;
      }
      if (other.HasJoint1) {
        Joint1 = other.Joint1;
      }
      if (other.HasJoint2) {
        Joint2 = other.Joint2;
      }
      if (other.HasSpringFrequency) {
        SpringFrequency = other.SpringFrequency;
      }
      if (other.HasSpringDampingRatio) {
        SpringDampingRatio = other.SpringDampingRatio;
      }
      if (other.HasMaxTorque) {
        MaxTorque = other.MaxTorque;
      }
      if (other.HasMaxLength) {
        MaxLength = other.MaxLength;
      }
      bodies_.Add(other.bodies_);
      joints_.Add(other.joints_);
      if (other.HasTargetVolume) {
        TargetVolume = other.TargetVolume;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Tag = input.ReadInt64();
            break;
          }
          case 16: {
            Type = (global::Box2D.PbJointType) input.ReadEnum();
            break;
          }
          case 24: {
            BodyA = input.ReadInt32();
            break;
          }
          case 32: {
            BodyB = input.ReadInt32();
            break;
          }
          case 40: {
            CollideConnected = input.ReadBool();
            break;
          }
          case 50: {
            if (localAnchorA_ == null) {
              LocalAnchorA = new global::Box2D.PbVec2();
            }
            input.ReadMessage(LocalAnchorA);
            break;
          }
          case 58: {
            if (localAnchorB_ == null) {
              LocalAnchorB = new global::Box2D.PbVec2();
            }
            input.ReadMessage(LocalAnchorB);
            break;
          }
          case 85: {
            RefAngle = input.ReadFloat();
            break;
          }
          case 96: {
            EnableLimit = input.ReadBool();
            break;
          }
          case 109: {
            LowerLimit = input.ReadFloat();
            break;
          }
          case 117: {
            UpperLimit = input.ReadFloat();
            break;
          }
          case 120: {
            EnableMotor = input.ReadBool();
            break;
          }
          case 133: {
            MotorSpeed = input.ReadFloat();
            break;
          }
          case 141: {
            MaxMotorTorque = input.ReadFloat();
            break;
          }
          case 162: {
            if (localAxisA_ == null) {
              LocalAxisA = new global::Box2D.PbVec2();
            }
            input.ReadMessage(LocalAxisA);
            break;
          }
          case 173: {
            MaxMotorForce = input.ReadFloat();
            break;
          }
          case 245: {
            Length = input.ReadFloat();
            break;
          }
          case 253: {
            Frequency = input.ReadFloat();
            break;
          }
          case 261: {
            DampingRatio = input.ReadFloat();
            break;
          }
          case 322: {
            if (groundAnchorA_ == null) {
              GroundAnchorA = new global::Box2D.PbVec2();
            }
            input.ReadMessage(GroundAnchorA);
            break;
          }
          case 330: {
            if (groundAnchorB_ == null) {
              GroundAnchorB = new global::Box2D.PbVec2();
            }
            input.ReadMessage(GroundAnchorB);
            break;
          }
          case 341: {
            LengthA = input.ReadFloat();
            break;
          }
          case 349: {
            LengthB = input.ReadFloat();
            break;
          }
          case 357: {
            Ratio = input.ReadFloat();
            break;
          }
          case 365: {
            MaxLengthA = input.ReadFloat();
            break;
          }
          case 373: {
            MaxLengthB = input.ReadFloat();
            break;
          }
          case 402: {
            if (target_ == null) {
              Target = new global::Box2D.PbVec2();
            }
            input.ReadMessage(Target);
            break;
          }
          case 413: {
            MaxForce = input.ReadFloat();
            break;
          }
          case 488: {
            Joint1 = input.ReadInt32();
            break;
          }
          case 496: {
            Joint2 = input.ReadInt32();
            break;
          }
          case 565: {
            SpringFrequency = input.ReadFloat();
            break;
          }
          case 573: {
            SpringDampingRatio = input.ReadFloat();
            break;
          }
          case 725: {
            MaxTorque = input.ReadFloat();
            break;
          }
          case 805: {
            MaxLength = input.ReadFloat();
            break;
          }
          case 882:
          case 880: {
            bodies_.AddEntriesFrom(input, _repeated_bodies_codec);
            break;
          }
          case 890:
          case 888: {
            joints_.AddEntriesFrom(input, _repeated_joints_codec);
            break;
          }
          case 901: {
            TargetVolume = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Tag = input.ReadInt64();
            break;
          }
          case 16: {
            Type = (global::Box2D.PbJointType) input.ReadEnum();
            break;
          }
          case 24: {
            BodyA = input.ReadInt32();
            break;
          }
          case 32: {
            BodyB = input.ReadInt32();
            break;
          }
          case 40: {
            CollideConnected = input.ReadBool();
            break;
          }
          case 50: {
            if (localAnchorA_ == null) {
              LocalAnchorA = new global::Box2D.PbVec2();
            }
            input.ReadMessage(LocalAnchorA);
            break;
          }
          case 58: {
            if (localAnchorB_ == null) {
              LocalAnchorB = new global::Box2D.PbVec2();
            }
            input.ReadMessage(LocalAnchorB);
            break;
          }
          case 85: {
            RefAngle = input.ReadFloat();
            break;
          }
          case 96: {
            EnableLimit = input.ReadBool();
            break;
          }
          case 109: {
            LowerLimit = input.ReadFloat();
            break;
          }
          case 117: {
            UpperLimit = input.ReadFloat();
            break;
          }
          case 120: {
            EnableMotor = input.ReadBool();
            break;
          }
          case 133: {
            MotorSpeed = input.ReadFloat();
            break;
          }
          case 141: {
            MaxMotorTorque = input.ReadFloat();
            break;
          }
          case 162: {
            if (localAxisA_ == null) {
              LocalAxisA = new global::Box2D.PbVec2();
            }
            input.ReadMessage(LocalAxisA);
            break;
          }
          case 173: {
            MaxMotorForce = input.ReadFloat();
            break;
          }
          case 245: {
            Length = input.ReadFloat();
            break;
          }
          case 253: {
            Frequency = input.ReadFloat();
            break;
          }
          case 261: {
            DampingRatio = input.ReadFloat();
            break;
          }
          case 322: {
            if (groundAnchorA_ == null) {
              GroundAnchorA = new global::Box2D.PbVec2();
            }
            input.ReadMessage(GroundAnchorA);
            break;
          }
          case 330: {
            if (groundAnchorB_ == null) {
              GroundAnchorB = new global::Box2D.PbVec2();
            }
            input.ReadMessage(GroundAnchorB);
            break;
          }
          case 341: {
            LengthA = input.ReadFloat();
            break;
          }
          case 349: {
            LengthB = input.ReadFloat();
            break;
          }
          case 357: {
            Ratio = input.ReadFloat();
            break;
          }
          case 365: {
            MaxLengthA = input.ReadFloat();
            break;
          }
          case 373: {
            MaxLengthB = input.ReadFloat();
            break;
          }
          case 402: {
            if (target_ == null) {
              Target = new global::Box2D.PbVec2();
            }
            input.ReadMessage(Target);
            break;
          }
          case 413: {
            MaxForce = input.ReadFloat();
            break;
          }
          case 488: {
            Joint1 = input.ReadInt32();
            break;
          }
          case 496: {
            Joint2 = input.ReadInt32();
            break;
          }
          case 565: {
            SpringFrequency = input.ReadFloat();
            break;
          }
          case 573: {
            SpringDampingRatio = input.ReadFloat();
            break;
          }
          case 725: {
            MaxTorque = input.ReadFloat();
            break;
          }
          case 805: {
            MaxLength = input.ReadFloat();
            break;
          }
          case 882:
          case 880: {
            bodies_.AddEntriesFrom(ref input, _repeated_bodies_codec);
            break;
          }
          case 890:
          case 888: {
            joints_.AddEntriesFrom(ref input, _repeated_joints_codec);
            break;
          }
          case 901: {
            TargetVolume = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PbBody : pb::IMessage<PbBody>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PbBody> _parser = new pb::MessageParser<PbBody>(() => new PbBody());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PbBody> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Box2D.Box2DReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PbBody() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PbBody(PbBody other) : this() {
      _hasBits0 = other._hasBits0;
      tag_ = other.tag_;
      type_ = other.type_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      angle_ = other.angle_;
      linearVelocity_ = other.linearVelocity_ != null ? other.linearVelocity_.Clone() : null;
      angularVelocity_ = other.angularVelocity_;
      force_ = other.force_ != null ? other.force_.Clone() : null;
      torque_ = other.torque_;
      mass_ = other.mass_;
      i_ = other.i_;
      linearDamping_ = other.linearDamping_;
      angularDamping_ = other.angularDamping_;
      gravityScale_ = other.gravityScale_;
      bullet_ = other.bullet_;
      allowSleep_ = other.allowSleep_;
      awake_ = other.awake_;
      active_ = other.active_;
      fixedRotation_ = other.fixedRotation_;
      uUID_ = other.uUID_;
      fixtures_ = other.fixtures_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PbBody Clone() {
      return new PbBody(this);
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 1;
    private readonly static long TagDefaultValue = 0L;

    private long tag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Tag {
      get { if ((_hasBits0 & 1) != 0) { return tag_; } else { return TagDefaultValue; } }
      set {
        _hasBits0 |= 1;
        tag_ = value;
      }
    }
    /// <summary>Gets whether the "tag" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTag {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "tag" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTag() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private readonly static global::Box2D.PbBodyType TypeDefaultValue = global::Box2D.PbBodyType.Static;

    private global::Box2D.PbBodyType type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Box2D.PbBodyType Type {
      get { if ((_hasBits0 & 2) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 10;
    private global::Box2D.PbVec2 position_;
    /// <summary>
    /// physical attributes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Box2D.PbVec2 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "angle" field.</summary>
    public const int AngleFieldNumber = 11;
    private readonly static float AngleDefaultValue = 0F;

    private float angle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Angle {
      get { if ((_hasBits0 & 4) != 0) { return angle_; } else { return AngleDefaultValue; } }
      set {
        _hasBits0 |= 4;
        angle_ = value;
      }
    }
    /// <summary>Gets whether the "angle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAngle {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "angle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAngle() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "linear_velocity" field.</summary>
    public const int LinearVelocityFieldNumber = 12;
    private global::Box2D.PbVec2 linearVelocity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Box2D.PbVec2 LinearVelocity {
      get { return linearVelocity_; }
      set {
        linearVelocity_ = value;
      }
    }

    /// <summary>Field number for the "angular_velocity" field.</summary>
    public const int AngularVelocityFieldNumber = 13;
    private readonly static float AngularVelocityDefaultValue = 0F;

    private float angularVelocity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AngularVelocity {
      get { if ((_hasBits0 & 8) != 0) { return angularVelocity_; } else { return AngularVelocityDefaultValue; } }
      set {
        _hasBits0 |= 8;
        angularVelocity_ = value;
      }
    }
    /// <summary>Gets whether the "angular_velocity" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAngularVelocity {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "angular_velocity" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAngularVelocity() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "force" field.</summary>
    public const int ForceFieldNumber = 14;
    private global::Box2D.PbVec2 force_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Box2D.PbVec2 Force {
      get { return force_; }
      set {
        force_ = value;
      }
    }

    /// <summary>Field number for the "torque" field.</summary>
    public const int TorqueFieldNumber = 15;
    private readonly static float TorqueDefaultValue = 0F;

    private float torque_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Torque {
      get { if ((_hasBits0 & 16) != 0) { return torque_; } else { return TorqueDefaultValue; } }
      set {
        _hasBits0 |= 16;
        torque_ = value;
      }
    }
    /// <summary>Gets whether the "torque" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTorque {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "torque" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTorque() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "mass" field.</summary>
    public const int MassFieldNumber = 16;
    private readonly static float MassDefaultValue = 0F;

    private float mass_;
    /// <summary>
    /// mass
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Mass {
      get { if ((_hasBits0 & 32) != 0) { return mass_; } else { return MassDefaultValue; } }
      set {
        _hasBits0 |= 32;
        mass_ = value;
      }
    }
    /// <summary>Gets whether the "mass" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMass {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "mass" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMass() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "I" field.</summary>
    public const int IFieldNumber = 17;
    private readonly static float IDefaultValue = 0F;

    private float i_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float I {
      get { if ((_hasBits0 & 64) != 0) { return i_; } else { return IDefaultValue; } }
      set {
        _hasBits0 |= 64;
        i_ = value;
      }
    }
    /// <summary>Gets whether the "I" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasI {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "I" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearI() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "linear_damping" field.</summary>
    public const int LinearDampingFieldNumber = 50;
    private readonly static float LinearDampingDefaultValue = 0F;

    private float linearDamping_;
    /// <summary>
    /// configuration
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float LinearDamping {
      get { if ((_hasBits0 & 128) != 0) { return linearDamping_; } else { return LinearDampingDefaultValue; } }
      set {
        _hasBits0 |= 128;
        linearDamping_ = value;
      }
    }
    /// <summary>Gets whether the "linear_damping" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLinearDamping {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "linear_damping" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLinearDamping() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "angular_damping" field.</summary>
    public const int AngularDampingFieldNumber = 51;
    private readonly static float AngularDampingDefaultValue = 0F;

    private float angularDamping_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AngularDamping {
      get { if ((_hasBits0 & 256) != 0) { return angularDamping_; } else { return AngularDampingDefaultValue; } }
      set {
        _hasBits0 |= 256;
        angularDamping_ = value;
      }
    }
    /// <summary>Gets whether the "angular_damping" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAngularDamping {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "angular_damping" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAngularDamping() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "gravity_scale" field.</summary>
    public const int GravityScaleFieldNumber = 52;
    private readonly static float GravityScaleDefaultValue = 0F;

    private float gravityScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float GravityScale {
      get { if ((_hasBits0 & 512) != 0) { return gravityScale_; } else { return GravityScaleDefaultValue; } }
      set {
        _hasBits0 |= 512;
        gravityScale_ = value;
      }
    }
    /// <summary>Gets whether the "gravity_scale" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGravityScale {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "gravity_scale" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGravityScale() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "bullet" field.</summary>
    public const int BulletFieldNumber = 53;
    private readonly static bool BulletDefaultValue = false;

    private bool bullet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Bullet {
      get { if ((_hasBits0 & 1024) != 0) { return bullet_; } else { return BulletDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        bullet_ = value;
      }
    }
    /// <summary>Gets whether the "bullet" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBullet {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "bullet" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBullet() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "allow_sleep" field.</summary>
    public const int AllowSleepFieldNumber = 54;
    private readonly static bool AllowSleepDefaultValue = false;

    private bool allowSleep_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool AllowSleep {
      get { if ((_hasBits0 & 2048) != 0) { return allowSleep_; } else { return AllowSleepDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        allowSleep_ = value;
      }
    }
    /// <summary>Gets whether the "allow_sleep" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAllowSleep {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "allow_sleep" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAllowSleep() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "awake" field.</summary>
    public const int AwakeFieldNumber = 55;
    private readonly static bool AwakeDefaultValue = false;

    private bool awake_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Awake {
      get { if ((_hasBits0 & 4096) != 0) { return awake_; } else { return AwakeDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        awake_ = value;
      }
    }
    /// <summary>Gets whether the "awake" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAwake {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "awake" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAwake() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "active" field.</summary>
    public const int ActiveFieldNumber = 56;
    private readonly static bool ActiveDefaultValue = false;

    private bool active_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Active {
      get { if ((_hasBits0 & 8192) != 0) { return active_; } else { return ActiveDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        active_ = value;
      }
    }
    /// <summary>Gets whether the "active" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasActive {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "active" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearActive() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "fixed_rotation" field.</summary>
    public const int FixedRotationFieldNumber = 57;
    private readonly static bool FixedRotationDefaultValue = false;

    private bool fixedRotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool FixedRotation {
      get { if ((_hasBits0 & 16384) != 0) { return fixedRotation_; } else { return FixedRotationDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        fixedRotation_ = value;
      }
    }
    /// <summary>Gets whether the "fixed_rotation" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFixedRotation {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "fixed_rotation" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFixedRotation() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "UUID" field.</summary>
    public const int UUIDFieldNumber = 60;
    private readonly static string UUIDDefaultValue = "";

    private string uUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UUID {
      get { return uUID_ ?? UUIDDefaultValue; }
      set {
        uUID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "UUID" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUUID {
      get { return uUID_ != null; }
    }
    /// <summary>Clears the value of the "UUID" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUUID() {
      uUID_ = null;
    }

    /// <summary>Field number for the "fixtures" field.</summary>
    public const int FixturesFieldNumber = 100;
    private static readonly pb::FieldCodec<global::Box2D.PbFixture> _repeated_fixtures_codec
        = pb::FieldCodec.ForMessage(802, global::Box2D.PbFixture.Parser);
    private readonly pbc::RepeatedField<global::Box2D.PbFixture> fixtures_ = new pbc::RepeatedField<global::Box2D.PbFixture>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Box2D.PbFixture> Fixtures {
      get { return fixtures_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PbBody);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PbBody other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tag != other.Tag) return false;
      if (Type != other.Type) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Angle, other.Angle)) return false;
      if (!object.Equals(LinearVelocity, other.LinearVelocity)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AngularVelocity, other.AngularVelocity)) return false;
      if (!object.Equals(Force, other.Force)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Torque, other.Torque)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Mass, other.Mass)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(I, other.I)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LinearDamping, other.LinearDamping)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AngularDamping, other.AngularDamping)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GravityScale, other.GravityScale)) return false;
      if (Bullet != other.Bullet) return false;
      if (AllowSleep != other.AllowSleep) return false;
      if (Awake != other.Awake) return false;
      if (Active != other.Active) return false;
      if (FixedRotation != other.FixedRotation) return false;
      if (UUID != other.UUID) return false;
      if(!fixtures_.Equals(other.fixtures_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTag) hash ^= Tag.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (HasAngle) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Angle);
      if (linearVelocity_ != null) hash ^= LinearVelocity.GetHashCode();
      if (HasAngularVelocity) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AngularVelocity);
      if (force_ != null) hash ^= Force.GetHashCode();
      if (HasTorque) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Torque);
      if (HasMass) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Mass);
      if (HasI) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(I);
      if (HasLinearDamping) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LinearDamping);
      if (HasAngularDamping) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AngularDamping);
      if (HasGravityScale) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GravityScale);
      if (HasBullet) hash ^= Bullet.GetHashCode();
      if (HasAllowSleep) hash ^= AllowSleep.GetHashCode();
      if (HasAwake) hash ^= Awake.GetHashCode();
      if (HasActive) hash ^= Active.GetHashCode();
      if (HasFixedRotation) hash ^= FixedRotation.GetHashCode();
      if (HasUUID) hash ^= UUID.GetHashCode();
      hash ^= fixtures_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTag) {
        output.WriteRawTag(8);
        output.WriteInt64(Tag);
      }
      if (HasType) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (position_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Position);
      }
      if (HasAngle) {
        output.WriteRawTag(93);
        output.WriteFloat(Angle);
      }
      if (linearVelocity_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(LinearVelocity);
      }
      if (HasAngularVelocity) {
        output.WriteRawTag(109);
        output.WriteFloat(AngularVelocity);
      }
      if (force_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(Force);
      }
      if (HasTorque) {
        output.WriteRawTag(125);
        output.WriteFloat(Torque);
      }
      if (HasMass) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(Mass);
      }
      if (HasI) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(I);
      }
      if (HasLinearDamping) {
        output.WriteRawTag(149, 3);
        output.WriteFloat(LinearDamping);
      }
      if (HasAngularDamping) {
        output.WriteRawTag(157, 3);
        output.WriteFloat(AngularDamping);
      }
      if (HasGravityScale) {
        output.WriteRawTag(165, 3);
        output.WriteFloat(GravityScale);
      }
      if (HasBullet) {
        output.WriteRawTag(168, 3);
        output.WriteBool(Bullet);
      }
      if (HasAllowSleep) {
        output.WriteRawTag(176, 3);
        output.WriteBool(AllowSleep);
      }
      if (HasAwake) {
        output.WriteRawTag(184, 3);
        output.WriteBool(Awake);
      }
      if (HasActive) {
        output.WriteRawTag(192, 3);
        output.WriteBool(Active);
      }
      if (HasFixedRotation) {
        output.WriteRawTag(200, 3);
        output.WriteBool(FixedRotation);
      }
      if (HasUUID) {
        output.WriteRawTag(226, 3);
        output.WriteString(UUID);
      }
      fixtures_.WriteTo(output, _repeated_fixtures_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTag) {
        output.WriteRawTag(8);
        output.WriteInt64(Tag);
      }
      if (HasType) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (position_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Position);
      }
      if (HasAngle) {
        output.WriteRawTag(93);
        output.WriteFloat(Angle);
      }
      if (linearVelocity_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(LinearVelocity);
      }
      if (HasAngularVelocity) {
        output.WriteRawTag(109);
        output.WriteFloat(AngularVelocity);
      }
      if (force_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(Force);
      }
      if (HasTorque) {
        output.WriteRawTag(125);
        output.WriteFloat(Torque);
      }
      if (HasMass) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(Mass);
      }
      if (HasI) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(I);
      }
      if (HasLinearDamping) {
        output.WriteRawTag(149, 3);
        output.WriteFloat(LinearDamping);
      }
      if (HasAngularDamping) {
        output.WriteRawTag(157, 3);
        output.WriteFloat(AngularDamping);
      }
      if (HasGravityScale) {
        output.WriteRawTag(165, 3);
        output.WriteFloat(GravityScale);
      }
      if (HasBullet) {
        output.WriteRawTag(168, 3);
        output.WriteBool(Bullet);
      }
      if (HasAllowSleep) {
        output.WriteRawTag(176, 3);
        output.WriteBool(AllowSleep);
      }
      if (HasAwake) {
        output.WriteRawTag(184, 3);
        output.WriteBool(Awake);
      }
      if (HasActive) {
        output.WriteRawTag(192, 3);
        output.WriteBool(Active);
      }
      if (HasFixedRotation) {
        output.WriteRawTag(200, 3);
        output.WriteBool(FixedRotation);
      }
      if (HasUUID) {
        output.WriteRawTag(226, 3);
        output.WriteString(UUID);
      }
      fixtures_.WriteTo(ref output, _repeated_fixtures_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasTag) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Tag);
      }
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (HasAngle) {
        size += 1 + 4;
      }
      if (linearVelocity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LinearVelocity);
      }
      if (HasAngularVelocity) {
        size += 1 + 4;
      }
      if (force_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Force);
      }
      if (HasTorque) {
        size += 1 + 4;
      }
      if (HasMass) {
        size += 2 + 4;
      }
      if (HasI) {
        size += 2 + 4;
      }
      if (HasLinearDamping) {
        size += 2 + 4;
      }
      if (HasAngularDamping) {
        size += 2 + 4;
      }
      if (HasGravityScale) {
        size += 2 + 4;
      }
      if (HasBullet) {
        size += 2 + 1;
      }
      if (HasAllowSleep) {
        size += 2 + 1;
      }
      if (HasAwake) {
        size += 2 + 1;
      }
      if (HasActive) {
        size += 2 + 1;
      }
      if (HasFixedRotation) {
        size += 2 + 1;
      }
      if (HasUUID) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UUID);
      }
      size += fixtures_.CalculateSize(_repeated_fixtures_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PbBody other) {
      if (other == null) {
        return;
      }
      if (other.HasTag) {
        Tag = other.Tag;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Box2D.PbVec2();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.HasAngle) {
        Angle = other.Angle;
      }
      if (other.linearVelocity_ != null) {
        if (linearVelocity_ == null) {
          LinearVelocity = new global::Box2D.PbVec2();
        }
        LinearVelocity.MergeFrom(other.LinearVelocity);
      }
      if (other.HasAngularVelocity) {
        AngularVelocity = other.AngularVelocity;
      }
      if (other.force_ != null) {
        if (force_ == null) {
          Force = new global::Box2D.PbVec2();
        }
        Force.MergeFrom(other.Force);
      }
      if (other.HasTorque) {
        Torque = other.Torque;
      }
      if (other.HasMass) {
        Mass = other.Mass;
      }
      if (other.HasI) {
        I = other.I;
      }
      if (other.HasLinearDamping) {
        LinearDamping = other.LinearDamping;
      }
      if (other.HasAngularDamping) {
        AngularDamping = other.AngularDamping;
      }
      if (other.HasGravityScale) {
        GravityScale = other.GravityScale;
      }
      if (other.HasBullet) {
        Bullet = other.Bullet;
      }
      if (other.HasAllowSleep) {
        AllowSleep = other.AllowSleep;
      }
      if (other.HasAwake) {
        Awake = other.Awake;
      }
      if (other.HasActive) {
        Active = other.Active;
      }
      if (other.HasFixedRotation) {
        FixedRotation = other.FixedRotation;
      }
      if (other.HasUUID) {
        UUID = other.UUID;
      }
      fixtures_.Add(other.fixtures_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Tag = input.ReadInt64();
            break;
          }
          case 16: {
            Type = (global::Box2D.PbBodyType) input.ReadEnum();
            break;
          }
          case 82: {
            if (position_ == null) {
              Position = new global::Box2D.PbVec2();
            }
            input.ReadMessage(Position);
            break;
          }
          case 93: {
            Angle = input.ReadFloat();
            break;
          }
          case 98: {
            if (linearVelocity_ == null) {
              LinearVelocity = new global::Box2D.PbVec2();
            }
            input.ReadMessage(LinearVelocity);
            break;
          }
          case 109: {
            AngularVelocity = input.ReadFloat();
            break;
          }
          case 114: {
            if (force_ == null) {
              Force = new global::Box2D.PbVec2();
            }
            input.ReadMessage(Force);
            break;
          }
          case 125: {
            Torque = input.ReadFloat();
            break;
          }
          case 133: {
            Mass = input.ReadFloat();
            break;
          }
          case 141: {
            I = input.ReadFloat();
            break;
          }
          case 405: {
            LinearDamping = input.ReadFloat();
            break;
          }
          case 413: {
            AngularDamping = input.ReadFloat();
            break;
          }
          case 421: {
            GravityScale = input.ReadFloat();
            break;
          }
          case 424: {
            Bullet = input.ReadBool();
            break;
          }
          case 432: {
            AllowSleep = input.ReadBool();
            break;
          }
          case 440: {
            Awake = input.ReadBool();
            break;
          }
          case 448: {
            Active = input.ReadBool();
            break;
          }
          case 456: {
            FixedRotation = input.ReadBool();
            break;
          }
          case 482: {
            UUID = input.ReadString();
            break;
          }
          case 802: {
            fixtures_.AddEntriesFrom(input, _repeated_fixtures_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Tag = input.ReadInt64();
            break;
          }
          case 16: {
            Type = (global::Box2D.PbBodyType) input.ReadEnum();
            break;
          }
          case 82: {
            if (position_ == null) {
              Position = new global::Box2D.PbVec2();
            }
            input.ReadMessage(Position);
            break;
          }
          case 93: {
            Angle = input.ReadFloat();
            break;
          }
          case 98: {
            if (linearVelocity_ == null) {
              LinearVelocity = new global::Box2D.PbVec2();
            }
            input.ReadMessage(LinearVelocity);
            break;
          }
          case 109: {
            AngularVelocity = input.ReadFloat();
            break;
          }
          case 114: {
            if (force_ == null) {
              Force = new global::Box2D.PbVec2();
            }
            input.ReadMessage(Force);
            break;
          }
          case 125: {
            Torque = input.ReadFloat();
            break;
          }
          case 133: {
            Mass = input.ReadFloat();
            break;
          }
          case 141: {
            I = input.ReadFloat();
            break;
          }
          case 405: {
            LinearDamping = input.ReadFloat();
            break;
          }
          case 413: {
            AngularDamping = input.ReadFloat();
            break;
          }
          case 421: {
            GravityScale = input.ReadFloat();
            break;
          }
          case 424: {
            Bullet = input.ReadBool();
            break;
          }
          case 432: {
            AllowSleep = input.ReadBool();
            break;
          }
          case 440: {
            Awake = input.ReadBool();
            break;
          }
          case 448: {
            Active = input.ReadBool();
            break;
          }
          case 456: {
            FixedRotation = input.ReadBool();
            break;
          }
          case 482: {
            UUID = input.ReadString();
            break;
          }
          case 802: {
            fixtures_.AddEntriesFrom(ref input, _repeated_fixtures_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PbWorld : pb::IMessage<PbWorld>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PbWorld> _parser = new pb::MessageParser<PbWorld>(() => new PbWorld());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PbWorld> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Box2D.Box2DReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PbWorld() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PbWorld(PbWorld other) : this() {
      _hasBits0 = other._hasBits0;
      tag_ = other.tag_;
      gravity_ = other.gravity_ != null ? other.gravity_.Clone() : null;
      allowSleep_ = other.allowSleep_;
      autoClearForces_ = other.autoClearForces_;
      warmStarting_ = other.warmStarting_;
      continuousPhysics_ = other.continuousPhysics_;
      subStepping_ = other.subStepping_;
      bodies_ = other.bodies_.Clone();
      joints_ = other.joints_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PbWorld Clone() {
      return new PbWorld(this);
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 1;
    private readonly static long TagDefaultValue = 0L;

    private long tag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Tag {
      get { if ((_hasBits0 & 1) != 0) { return tag_; } else { return TagDefaultValue; } }
      set {
        _hasBits0 |= 1;
        tag_ = value;
      }
    }
    /// <summary>Gets whether the "tag" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTag {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "tag" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTag() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "gravity" field.</summary>
    public const int GravityFieldNumber = 2;
    private global::Box2D.PbVec2 gravity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Box2D.PbVec2 Gravity {
      get { return gravity_; }
      set {
        gravity_ = value;
      }
    }

    /// <summary>Field number for the "allow_sleep" field.</summary>
    public const int AllowSleepFieldNumber = 3;
    private readonly static bool AllowSleepDefaultValue = false;

    private bool allowSleep_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool AllowSleep {
      get { if ((_hasBits0 & 2) != 0) { return allowSleep_; } else { return AllowSleepDefaultValue; } }
      set {
        _hasBits0 |= 2;
        allowSleep_ = value;
      }
    }
    /// <summary>Gets whether the "allow_sleep" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAllowSleep {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "allow_sleep" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAllowSleep() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "auto_clear_forces" field.</summary>
    public const int AutoClearForcesFieldNumber = 4;
    private readonly static bool AutoClearForcesDefaultValue = false;

    private bool autoClearForces_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool AutoClearForces {
      get { if ((_hasBits0 & 4) != 0) { return autoClearForces_; } else { return AutoClearForcesDefaultValue; } }
      set {
        _hasBits0 |= 4;
        autoClearForces_ = value;
      }
    }
    /// <summary>Gets whether the "auto_clear_forces" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAutoClearForces {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "auto_clear_forces" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAutoClearForces() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "warm_starting" field.</summary>
    public const int WarmStartingFieldNumber = 5;
    private readonly static bool WarmStartingDefaultValue = false;

    private bool warmStarting_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool WarmStarting {
      get { if ((_hasBits0 & 8) != 0) { return warmStarting_; } else { return WarmStartingDefaultValue; } }
      set {
        _hasBits0 |= 8;
        warmStarting_ = value;
      }
    }
    /// <summary>Gets whether the "warm_starting" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWarmStarting {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "warm_starting" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWarmStarting() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "continuous_physics" field.</summary>
    public const int ContinuousPhysicsFieldNumber = 6;
    private readonly static bool ContinuousPhysicsDefaultValue = false;

    private bool continuousPhysics_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ContinuousPhysics {
      get { if ((_hasBits0 & 16) != 0) { return continuousPhysics_; } else { return ContinuousPhysicsDefaultValue; } }
      set {
        _hasBits0 |= 16;
        continuousPhysics_ = value;
      }
    }
    /// <summary>Gets whether the "continuous_physics" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasContinuousPhysics {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "continuous_physics" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearContinuousPhysics() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "sub_stepping" field.</summary>
    public const int SubSteppingFieldNumber = 7;
    private readonly static bool SubSteppingDefaultValue = false;

    private bool subStepping_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SubStepping {
      get { if ((_hasBits0 & 32) != 0) { return subStepping_; } else { return SubSteppingDefaultValue; } }
      set {
        _hasBits0 |= 32;
        subStepping_ = value;
      }
    }
    /// <summary>Gets whether the "sub_stepping" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSubStepping {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "sub_stepping" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSubStepping() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "bodies" field.</summary>
    public const int BodiesFieldNumber = 20;
    private static readonly pb::FieldCodec<global::Box2D.PbBody> _repeated_bodies_codec
        = pb::FieldCodec.ForMessage(162, global::Box2D.PbBody.Parser);
    private readonly pbc::RepeatedField<global::Box2D.PbBody> bodies_ = new pbc::RepeatedField<global::Box2D.PbBody>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Box2D.PbBody> Bodies {
      get { return bodies_; }
    }

    /// <summary>Field number for the "joints" field.</summary>
    public const int JointsFieldNumber = 21;
    private static readonly pb::FieldCodec<global::Box2D.PbJoint> _repeated_joints_codec
        = pb::FieldCodec.ForMessage(170, global::Box2D.PbJoint.Parser);
    private readonly pbc::RepeatedField<global::Box2D.PbJoint> joints_ = new pbc::RepeatedField<global::Box2D.PbJoint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Box2D.PbJoint> Joints {
      get { return joints_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PbWorld);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PbWorld other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tag != other.Tag) return false;
      if (!object.Equals(Gravity, other.Gravity)) return false;
      if (AllowSleep != other.AllowSleep) return false;
      if (AutoClearForces != other.AutoClearForces) return false;
      if (WarmStarting != other.WarmStarting) return false;
      if (ContinuousPhysics != other.ContinuousPhysics) return false;
      if (SubStepping != other.SubStepping) return false;
      if(!bodies_.Equals(other.bodies_)) return false;
      if(!joints_.Equals(other.joints_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTag) hash ^= Tag.GetHashCode();
      if (gravity_ != null) hash ^= Gravity.GetHashCode();
      if (HasAllowSleep) hash ^= AllowSleep.GetHashCode();
      if (HasAutoClearForces) hash ^= AutoClearForces.GetHashCode();
      if (HasWarmStarting) hash ^= WarmStarting.GetHashCode();
      if (HasContinuousPhysics) hash ^= ContinuousPhysics.GetHashCode();
      if (HasSubStepping) hash ^= SubStepping.GetHashCode();
      hash ^= bodies_.GetHashCode();
      hash ^= joints_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTag) {
        output.WriteRawTag(8);
        output.WriteInt64(Tag);
      }
      if (gravity_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Gravity);
      }
      if (HasAllowSleep) {
        output.WriteRawTag(24);
        output.WriteBool(AllowSleep);
      }
      if (HasAutoClearForces) {
        output.WriteRawTag(32);
        output.WriteBool(AutoClearForces);
      }
      if (HasWarmStarting) {
        output.WriteRawTag(40);
        output.WriteBool(WarmStarting);
      }
      if (HasContinuousPhysics) {
        output.WriteRawTag(48);
        output.WriteBool(ContinuousPhysics);
      }
      if (HasSubStepping) {
        output.WriteRawTag(56);
        output.WriteBool(SubStepping);
      }
      bodies_.WriteTo(output, _repeated_bodies_codec);
      joints_.WriteTo(output, _repeated_joints_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTag) {
        output.WriteRawTag(8);
        output.WriteInt64(Tag);
      }
      if (gravity_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Gravity);
      }
      if (HasAllowSleep) {
        output.WriteRawTag(24);
        output.WriteBool(AllowSleep);
      }
      if (HasAutoClearForces) {
        output.WriteRawTag(32);
        output.WriteBool(AutoClearForces);
      }
      if (HasWarmStarting) {
        output.WriteRawTag(40);
        output.WriteBool(WarmStarting);
      }
      if (HasContinuousPhysics) {
        output.WriteRawTag(48);
        output.WriteBool(ContinuousPhysics);
      }
      if (HasSubStepping) {
        output.WriteRawTag(56);
        output.WriteBool(SubStepping);
      }
      bodies_.WriteTo(ref output, _repeated_bodies_codec);
      joints_.WriteTo(ref output, _repeated_joints_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasTag) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Tag);
      }
      if (gravity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gravity);
      }
      if (HasAllowSleep) {
        size += 1 + 1;
      }
      if (HasAutoClearForces) {
        size += 1 + 1;
      }
      if (HasWarmStarting) {
        size += 1 + 1;
      }
      if (HasContinuousPhysics) {
        size += 1 + 1;
      }
      if (HasSubStepping) {
        size += 1 + 1;
      }
      size += bodies_.CalculateSize(_repeated_bodies_codec);
      size += joints_.CalculateSize(_repeated_joints_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PbWorld other) {
      if (other == null) {
        return;
      }
      if (other.HasTag) {
        Tag = other.Tag;
      }
      if (other.gravity_ != null) {
        if (gravity_ == null) {
          Gravity = new global::Box2D.PbVec2();
        }
        Gravity.MergeFrom(other.Gravity);
      }
      if (other.HasAllowSleep) {
        AllowSleep = other.AllowSleep;
      }
      if (other.HasAutoClearForces) {
        AutoClearForces = other.AutoClearForces;
      }
      if (other.HasWarmStarting) {
        WarmStarting = other.WarmStarting;
      }
      if (other.HasContinuousPhysics) {
        ContinuousPhysics = other.ContinuousPhysics;
      }
      if (other.HasSubStepping) {
        SubStepping = other.SubStepping;
      }
      bodies_.Add(other.bodies_);
      joints_.Add(other.joints_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Tag = input.ReadInt64();
            break;
          }
          case 18: {
            if (gravity_ == null) {
              Gravity = new global::Box2D.PbVec2();
            }
            input.ReadMessage(Gravity);
            break;
          }
          case 24: {
            AllowSleep = input.ReadBool();
            break;
          }
          case 32: {
            AutoClearForces = input.ReadBool();
            break;
          }
          case 40: {
            WarmStarting = input.ReadBool();
            break;
          }
          case 48: {
            ContinuousPhysics = input.ReadBool();
            break;
          }
          case 56: {
            SubStepping = input.ReadBool();
            break;
          }
          case 162: {
            bodies_.AddEntriesFrom(input, _repeated_bodies_codec);
            break;
          }
          case 170: {
            joints_.AddEntriesFrom(input, _repeated_joints_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Tag = input.ReadInt64();
            break;
          }
          case 18: {
            if (gravity_ == null) {
              Gravity = new global::Box2D.PbVec2();
            }
            input.ReadMessage(Gravity);
            break;
          }
          case 24: {
            AllowSleep = input.ReadBool();
            break;
          }
          case 32: {
            AutoClearForces = input.ReadBool();
            break;
          }
          case 40: {
            WarmStarting = input.ReadBool();
            break;
          }
          case 48: {
            ContinuousPhysics = input.ReadBool();
            break;
          }
          case 56: {
            SubStepping = input.ReadBool();
            break;
          }
          case 162: {
            bodies_.AddEntriesFrom(ref input, _repeated_bodies_codec);
            break;
          }
          case 170: {
            joints_.AddEntriesFrom(ref input, _repeated_joints_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
